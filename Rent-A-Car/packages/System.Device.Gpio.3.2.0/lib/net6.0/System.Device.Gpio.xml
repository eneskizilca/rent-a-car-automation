<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Device.Gpio</name>
    </assembly>
    <members>
        <member name="M:Interop.libbcmhost.bcm_host_get_peripheral_address">
            <summary>
            Get the peripheral base address of a RaspberryPi.
            </summary>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_chip_iter_free(System.IntPtr)">
            <summary>
            Release all resources allocated for the gpiochip iterator and close the most recently opened gpiochip(if any).
            </summary>
            <param name="iter">The gpiochip iterator object</param>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_chip_close(System.IntPtr)">
            <summary>
            Close a GPIO chip handle and release all allocated resources.
            </summary>
            <param name="chip">The GPIO chip pointer</param>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_chip_num_lines(System.Device.Gpio.Libgpiod.V1.SafeChipHandle)">
            <summary>
            Get the number of GPIO lines exposed by this chip.
            </summary>
            <param name="chip">The GPIO chip handle.</param>
            <returns>Number of GPIO lines.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_chip_get_line(System.Device.Gpio.Libgpiod.V1.SafeChipHandle,System.Int32)">
            <summary>
            Get the handle to the GPIO line at given offset.
            </summary>
            <param name="chip">The GPIO chip handle</param>
            <param name="offset">The offset of the GPIO line</param>
            <returns>Handle to the GPIO line or <see langword="null" /> if an error occurred.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_request_input(System.IntPtr,System.String)">
            <summary>
            Reserve a single line, set the direction to input.
            </summary>
            <param name="line">GPIO line handle</param>
            <param name="consumer">Name of the consumer.</param>
            <returns>0 if the line was properly reserved, -1 on failure.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_request_input_flags(System.IntPtr,System.String,System.Int32)">
            <summary>
            Reserve a single line, set the direction to input with flags
            </summary>
            <param name="line">GPIO line handle</param>
            <param name="consumer">Name of the consumer.</param>
            <param name="flags">Additional request flags.</param>
            <returns>0 if the line was properly reserved, -1 on failure.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_request_output(System.IntPtr,System.String,System.Int32)">
            <summary>
            Reserve a single line, set the direction to output.
            </summary>
            <param name="line">GPIO line handle</param>
            <param name="consumer">Name of the consumer.</param>
            <param name="default_val">Initial value of the line</param>
            <returns>0 if the line was properly reserved, -1 on failure.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_set_value(System.IntPtr,System.Int32)">
            <summary>
            Set the value of a single GPIO line.
            </summary>
            <param name="line">GPIO line handle</param>
            <param name="value">New value.</param>
            <returns>0 if the operation succeeds. In case of an error this routine returns -1 and sets the last error number.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_get_value(System.IntPtr)">
            <summary>
            Read current value of a single GPIO line.
            </summary>
            <param name="line">GPIO line handle</param>
            <returns>0 or 1 if the operation succeeds. On error this routine returns -1 and sets the last error number.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_is_free(System.IntPtr)">
            <summary>
            Check if line is no used (not set as Input or Output, not listening events).
            </summary>
            <param name="line">GPIO line handle</param>
            <returns>false if pin is used as Input/Output or Listening an event, true if it is free</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_release(System.IntPtr)">
            <summary>
            Release a previously reserved line.
            </summary>
            <param name="lineHandle">GPIO line handle</param>
            <remarks>
            This does NOT invalidate the line handle. This only releases the lock, so that a gpiod_line_request_input/gpiod_line_request_output can be called again.
            </remarks>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_direction(System.IntPtr)">
            <summary>
            Get the direction of the pin (input or output)
            </summary>
            <param name="lineHandle">GPIO line handle</param>
            <returns>1 for input, 2 for output</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_bias(System.IntPtr)">
            <summary>
            Read the GPIO line bias setting.
            </summary>
            <param name="lineHandle">GPIO line handle</param>
            <returns>GPIOD_LINE_BIAS_PULL_UP (3), GPIOD_LINE_BIAS_PULL_DOWN (4), GPIOD_LINE_BIAS_DISABLE (2) or GPIOD_LINE_BIAS_UNKNOWN (1). </returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_request_both_edges_events(System.IntPtr,System.String)">
            <summary>
            Request all event type notifications on a single line.
            </summary>
            <param name="line">GPIO line handle</param>
            <param name="consumer">Name of the consumer.</param>
            <returns>0 the operation succeeds, -1 on failure.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_event_wait(System.IntPtr,TimeSpec@)">
            <summary>
            Wait for an event on a single line.
            </summary>
            <param name="line">GPIO line handle</param>
            <param name="timeout">The TimeSpec to wait for before timing out</param>
            <returns>0 if wait timed out, -1 if an error occurred, 1 if an event occurred.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_line_event_read(System.IntPtr,GpioLineEvent@)">
            <summary>
            Read the last event from the GPIO line.
            </summary>
            <param name="line">GPIO line handle</param>
            <param name="gpioEvent">Reference to the gpio event that was detected</param>
            <returns>1 if rising edge event occurred, 2 on falling edge, -1 on error.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_chip_open_by_number(System.Int32)">
            <summary>
            Open a gpiochip by number.
            </summary>
            <returns>GPIO chip pointer handle or NULL if an error occurred.</returns>
        </member>
        <member name="M:Interop.LibgpiodV1.gpiod_version_string">
            <summary>
            Get the API version of the library as a human-readable string.
            </summary>
            <returns>Human-readable string containing the library version.</returns>
        </member>
        <member name="T:Interop.LibgpiodV2">
            <summary>
            Binding for libgpiod V2 <see href="https://libgpiod.readthedocs.io/en/latest/modules.html"/>
            </summary>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_chip_open(System.IntPtr)">
            <remarks>IntPtr is used instead of string so the CLR does not free native memory.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_chip_close(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_chip_get_path(System.Device.Gpio.Libgpiod.V2.ChipSafeHandle)">
            <remarks>IntPtr is used instead of string so the CLR does not free native memory.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_chip_info_free(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_chip_info_get_name(System.Device.Gpio.Libgpiod.V2.ChipInfoSafeHandle)">
            <remarks>IntPtr is used instead of string so the CLR does not free native memory.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_chip_info_get_label(System.Device.Gpio.Libgpiod.V2.ChipInfoSafeHandle)">
            <remarks>IntPtr is used instead of string so the CLR does not free native memory.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_line_info_free(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_line_info_get_name(System.Device.Gpio.Libgpiod.V2.LineInfoSafeHandle)">
            <remarks>IntPtr is used instead of string so the CLR does not free native memory.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_line_info_get_consumer(System.Device.Gpio.Libgpiod.V2.LineInfoSafeHandle)">
            <remarks>IntPtr is used instead of string so the CLR does not free native memory.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_info_event_free(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_line_settings_free(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_line_config_free(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_request_config_free(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_line_request_release(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_edge_event_free(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="M:Interop.LibgpiodV2.gpiod_edge_event_buffer_free(System.IntPtr)">
            <remarks>IntPtr is used to avoid ObjectDisposed exceptions.</remarks>
        </member>
        <member name="F:I2cSettings.I2C_FUNCS">
            <summary>Get the adapter functionality mask.</summary>
        </member>
        <member name="F:I2cSettings.I2C_SLAVE_FORCE">
            <summary>Use this replica address, even if it is already in use by a driver.</summary>
        </member>
        <member name="F:I2cSettings.I2C_RDWR">
            <summary>Combined R/W transfer (one STOP only).</summary>
        </member>
        <member name="F:I2cSettings.I2C_SMBUS">
            <summary>Smbus transfer.</summary>
        </member>
        <member name="F:I2cMessageFlags.I2C_M_WR">
            <summary>Write data to replica.</summary>
        </member>
        <member name="F:I2cMessageFlags.I2C_M_RD">
            <summary>Read data from replica.</summary>
        </member>
        <member name="F:SpiSettings.SPI_IOC_WR_MODE">
            <summary>Set SPI mode.</summary>
        </member>
        <member name="F:SpiSettings.SPI_IOC_RD_MODE">
            <summary>Get SPI mode.</summary>
        </member>
        <member name="F:SpiSettings.SPI_IOC_WR_BITS_PER_WORD">
            <summary>Set bits per word.</summary>
        </member>
        <member name="F:SpiSettings.SPI_IOC_RD_BITS_PER_WORD">
            <summary>Get bits per word.</summary>
        </member>
        <member name="F:SpiSettings.SPI_IOC_WR_MAX_SPEED_HZ">
            <summary>Set max speed (Hz).</summary>
        </member>
        <member name="F:SpiSettings.SPI_IOC_RD_MAX_SPEED_HZ">
            <summary>Get max speed (Hz).</summary>
        </member>
        <member name="T:RegisterView">
             <summary>
             The BCM GPIO registers expose the data/direction/interrupt/etc functionality of pins.
             Each register is 64 bits, where each bit represents a logical register number.
            
             For example, writing HIGH to register 20 would translate to (registerViewPointer).GPSET[0] | (1U &lt;&lt; 20).
             </summary>
        </member>
        <member name="F:RegisterView.GPFSEL">
            <summary>GPIO Function Select, 6x32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPSET">
            <summary>GPIO Pin Output Set, 2x32 bits, W.</summary>
        </member>
        <member name="F:RegisterView.GPCLR">
            <summary>GPIO Pin Output Clear, 2x32 bits, W.</summary>
        </member>
        <member name="F:RegisterView.GPLEV">
            <summary>GPIO Pin Level, 2x32 bits, R.</summary>
        </member>
        <member name="F:RegisterView.GPEDS">
            <summary>GPIO Pin Event Detect Status, 2x32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPREN">
            <summary>GPIO Pin Rising Edge Detect Enable, 2x32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPFEN">
            <summary>GPIO Pin Falling Edge Detect Enable, 2x32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPHEN">
            <summary>GPIO Pin High Detect Enable, 2x32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPLEN">
            <summary>GPIO Pin Low Detect Enable, 2x32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPAREN">
            <summary>GPIO Pin Async. Rising Edge Detect, 2x32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPAFEN">
            <summary>GPIO Pin Async. Falling Edge Detect, 2x32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPPUD">
            <summary>GPIO Pin Pull-up/down Enable, 32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPPUDCLK">
            <summary>GPIO Pin Pull-up/down Enable Clock, 2x32 bits, R/W.</summary>
        </member>
        <member name="F:RegisterView.GPPUPPDN">
            <summary>Pull-up/down Enable on the BCM2711, 4x32 bits, R/W (2 bits per Pin)</summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V1.LineHandle">
            <summary>
            Pointer to a pin (Not a real SafeLineHandle, because we need to align its finalization with the owning object)
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V1.LineHandle.ReleaseLock">
            <summary>
            Release the lock on the line handle. <see cref="M:Interop.LibgpiodV1.gpiod_line_release(System.IntPtr)"/>
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V1.SafeChipHandle">
            <summary>
            Pointer to a general-purpose I/O (GPIO) chip.
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V1.SafeChipIteratorHandle">
            <summary>
            Pointer to an iterator of all GPIO chips available on the device.
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.GpiodEdgeEventType">
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html"/>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.GpiodLineBias">
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__defs.html"/>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.GpiodLineClock">
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__defs.html"/>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.GpiodLineDirection">
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__defs.html"/>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.GpiodLineDrive">
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__defs.html"/>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.GpiodLineEdge">
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__defs.html"/>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.GpiodLineInfoEventType">
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__watch.html"/>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.GpiodLineValue">
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__defs.html"/>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.EdgeEventNotFreeable">
            <summary>
            Used in case Libgpiod forbids the release
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineInfoSafeHandleNotFreeable">
            <summary>
            Used in case Libgpiod forbids the release
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.Chip">
            <summary>
            A GPIO chip object is associated with an open file descriptor to the GPIO character device. It exposes basic information about the chip and
            allows callers to retrieve information about each line, watch lines for state changes and make line requests.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.#ctor(System.Device.Gpio.Libgpiod.V2.ChipSafeHandle)">
            <summary>
            Constructor for a chip-proxy object. This call will try to open the chip.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#ga25097f48949d0ac81e9ab341193da1a4"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.GetPath">
            <summary>
            Get the path used to open the chip
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#gacdcb43322311212201b9295bfd44e162"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.GetInfo">
            <summary>
            Get information about the chip
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#gad65098ba48da0f22d1b0be149b4cf578"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.GetLineInfo(System.Device.Gpio.Libgpiod.V2.Offset)">
            <summary>
            Get a snapshot of information about a line.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#ga391930aadb053f38b59bae20058c7dac"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException"><paramref name="offset"/> not known to chip or other error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.WatchLineInfo(System.Device.Gpio.Libgpiod.V2.Offset)">
            <summary>
            Get a snapshot of the status of a line and start watching it for future changes
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#gae616072c7dc98088ed466e6c8030c6f8"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException"><paramref name="offset"/> not known to chip or other error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.UnWatchLineInfo(System.Device.Gpio.Libgpiod.V2.Offset)">
            <summary>
            Stop watching a line for status changes
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#gae94ec19eb6a44e35e8d87bc3d22047ab"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException"><paramref name="offset"/> not known to chip or other error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.GetFileDescriptor">
            <summary>
            Get the file descriptor associated with the chip.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#ga84ceb070e2f8cded775467f9dc780c67"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.WaitInfoEvent(System.Int64)">
            <summary>
            Wait for line status change events on any of the watched lines on the chip
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#ga7dc74ad4569a634c51284ffaa48fc4cb"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
            <returns>0 if wait timed out, 1 if an event is pending</returns>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.ReadInfoEvent">
            <summary>
            Read a single line status change event from the chip
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#ga7ad34f33d266705bb85d45f87e8c16cd"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.GetLineOffsetFromName(System.String)">
            <summary>
            Get a line's offset by name
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#gaabdbbb68c2736c97554848ba210c7e76"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Line is not exposed by chip or unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.RequestLines(System.Device.Gpio.Libgpiod.V2.RequestConfig,System.Device.Gpio.Libgpiod.V2.LineConfig)">
            <summary>
            Request a set of lines for exclusive usage
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#ga83d57e0b534168df5218327541b6c63e"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Request denied due to invalid request arguments or an unexpected error happened invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.MakeSnapshot">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.Chip.Snapshot">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.Snapshot.#ctor(System.Device.Gpio.Libgpiod.V2.ChipInfo.Snapshot,System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Device.Gpio.Libgpiod.V2.LineInfo.Snapshot})">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Chip.Snapshot.ToString">
            <summary>
            Converts the whole snapshot to string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.ChipInfo">
            <summary>
            The chip info contains all the publicly available information about a chip.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chip__info.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.ChipInfo.#ctor(System.Device.Gpio.Libgpiod.V2.ChipInfoSafeHandle)">
            <summary>
            Constructor for a chip-info-proxy object that points to an existing gpiod chip-info object using a safe handle.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chip__info.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.ChipInfo.GetName">
            <summary>
            Get the name of the chip as represented in the kernel
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chip__info.html#gafa15c848b7dd866ea55b4b39da74d6ad"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.ChipInfo.GetLabel">
            <summary>
            Get the label of the chip as represented in the kernel
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chip__info.html#ga6d9fa1a356c45ea3c2605667201aa769"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.ChipInfo.GetNumLines">
            <summary>
            Get the number of lines exposed by the chip
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chip__info.html#gad7c1bdfa5d489e7ecd57a705d4fa217a"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.ChipInfo.MakeSnapshot">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.ChipInfo.Snapshot">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.ChipInfo.Snapshot.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.ChipInfo.Snapshot.ToString">
            <summary>
            Converts the whole snapshot to string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.EdgeEvent">
            <summary>
            An edge event object contains information about a single line edge event. It contains the event type, timestamp and the offset of the line on
            which the event occurred as well as two sequence numbers (global for all lines in the associated request and local for this line only).
            Edge events are stored into an edge-event buffer object to improve performance and to limit the number of memory allocations when a large number
            of events are being read.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.#ctor(System.Device.Gpio.Libgpiod.V2.EdgeEventSafeHandle)">
            <summary>
            Constructor for a edge-event-proxy object that points to an existing gpiod edge-event object using a safe handle.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.Copy">
            <summary>
            Copies an existing gpiod edge-event object and returns a new edge-event-proxy object.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.GetEventType">
            <summary>
            Get the event type
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#gaf74a2865b2c703616bb8f90d4885af60"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.GetTimestampNs">
            <summary>
            Get the timestamp of the event
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#ga84d5be0e6994fde7b5c660a6c9f2ac0c"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.GetLineOffset">
            <summary>
            Get the offset of the line which triggered the event
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#ga3ff41bf3245f0cd717afa3b7f6ad2649"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.GetGlobalSequenceNumber">
            <summary>
            Get the global sequence number of the event
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#gae25e9202e25fc738baaae9d5788899d1"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.GetLineSequenceNumber">
            <summary>
            Get the event sequence number specific to the line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#gaa3deb45d0acc1b2cf8e81506559bc145"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.MakeSnapshot">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.EdgeEvent.Snapshot">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.Snapshot.#ctor(System.Device.Gpio.Libgpiod.V2.GpiodEdgeEventType,System.UInt64,System.Device.Gpio.Libgpiod.V2.Offset,System.Device.Gpio.Libgpiod.V2.SequenceNumber,System.Device.Gpio.Libgpiod.V2.SequenceNumber)">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEvent.Snapshot.ToString">
            <summary>
            Converts the whole snapshot to string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer">
            <summary>
            An edge event object contains information about a single line edge event. It contains the event type, timestamp and the offset of the line on
            which the event occurred as well as two sequence numbers (global for all lines in the associated request and local for this line only).
            Edge events are stored into an edge-event buffer object to improve performance and to limit the number of memory allocations when a large number
            of events are being read.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer.#ctor(System.Device.Gpio.Libgpiod.V2.EdgeEventBufferSafeHandle,System.Int32)">
            <summary>
            Constructor for a edge-event-buffer-proxy object. This call will create a new gpiod edge-event-buffer object.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <param name="capacity">The capacity of the event buffer.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#ga4249b081f27908f7b8365dd897673e21"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer.GetCapacity">
            <summary>
            Get the capacity (the max number of events that can be stored) of the event buffer
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#gab969a727573749810c16470a163c091b"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer.GetEvent(System.UInt64)">
            <summary>
            Get an event stored in the buffer
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#ga3d5e3b2f0ca992e4d39df02202ff9458"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer.GetNumEvents">
            <summary>
            Get the number of events a buffer has stored
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#gaf3bda00286ba4de94a4186c0ad61d255"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer.MakeSnapshot">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer.Snapshot">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer.Snapshot.#ctor(System.Int32,System.Int32)">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer.Snapshot.ToString">
            <summary>
            Converts the whole snapshot to string
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyBase._safeHandleLock">
            <remarks>
            Each proxy instance gets its dedicated lock instance.
            </remarks>
        </member>
        <member name="P:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyBase.SafeHandle">
            <summary>
            A safe handle to the libgpiod object
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyBase.CallLibgpiod(System.Action)">
            <summary>
            Helper function that wraps any exception (from a native call) in <see cref="T:System.Device.Gpio.Drivers.GpiodException"/> for easier exception handling on client side.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyBase.CallLibgpiod``1(System.Func{``0})">
            <summary>
            Helper function that wraps any exception (from a native call) in <see cref="T:System.Device.Gpio.Drivers.GpiodException"/> for easier exception handling on client side.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyBase.CallLibpiodLocked(System.Action)">
            <summary>
            Helper function that calls gpiod synchronized using a lock and wraps any exception (from a native call) in <see cref="T:System.Device.Gpio.Drivers.GpiodException"/>
            for easier exception handling on client side.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyBase.CallLibpiodLocked``1(System.Func{``0})">
            <summary>
            Helper function that calls gpiod synchronized using a lock and wraps any exception (from a native call) in <see cref="T:System.Device.Gpio.Drivers.GpiodException"/>
            for easier exception handling on client side.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyFactory.CreateChip(System.String)">
            <summary>
            Creates a chip-proxy object. This call will try to open the chip.
            </summary>
            <param name="devicePath">File system path to the chip device, e.g. '/dev/gpiochip4'</param>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">The chip does not exist or an unexpected error happened while opening chip</exception>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#ga25097f48949d0ac81e9ab341193da1a4"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyFactory.CreateChip(System.Int32)">
            <summary>
            Creates a chip-proxy object. This call will try to open the chip.
            </summary>
            <param name="chipNumber">Number that will be translated to a device path for example 4 -> '/dev/gpiochip4'</param>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">The chip does not exist or an unexpected error happened while opening chip</exception>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__chips.html#ga25097f48949d0ac81e9ab341193da1a4"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyFactory.CreateEdgeEventBuffer(System.Int32)">
            <summary>
            Creates a edge-event-buffer-proxy object. This call will create a new gpiod edge-event-buffer object.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#ga4249b081f27908f7b8365dd897673e21"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyFactory.CreateLineConfig">
            <summary>
            Creates a edge-event-buffer-proxy object. This call will create a new gpiod edge-event-buffer object.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__edge__event.html#ga4249b081f27908f7b8365dd897673e21"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyFactory.CreateLineSettings">
            <summary>
            Creates a line-settings-proxy object. This call will create a new gpiod line-settings object.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#gab02d1cceffbb24dc95edc851e8519f0b"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LibGpiodProxyFactory.CreateRequestConfig">
            <summary>
            Creates a a request-config-proxy object. This call will create a new gpiod request-config object.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__request__config.html#gaca72f4c114efce4aa3909a3f71fb6c8e"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineConfig">
            <summary>
            The line-config object contains the configuration for lines that can be used in two cases:
            <list type="number">
                <item><description>when making a line request</description></item>
                <item><description>when reconfiguring a set of already requested lines</description></item>
            </list>
            A new line-config object is empty. Using it in a request will lead to an error. In order to a line-config to become useful, it needs to be
            assigned at least one offset-to-settings mapping by calling gpiod_line_config_add_line_settings.
            When calling gpiod_chip_request_lines, the library will request all offsets that were assigned settings in the order that they were assigned.
            If any of the offsets was duplicated, the last one will take precedence.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__config.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.#ctor(System.Device.Gpio.Libgpiod.V2.LineConfigSafeHandle)">
            <summary>
            Constructor for a line-config-proxy object. This call will create a new gpiod line-config object.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__config.html#ga17ebc375388c6588fc96cf0f069d58b3"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.Reset">
            <summary>
            Reset the line config object
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__config.html#gaf4a8d7fba169608fe39cacdb8871c5bc"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.AddLineSettings(System.Device.Gpio.Libgpiod.V2.Offset[],System.Device.Gpio.Libgpiod.V2.LineSettings)">
            <summary>
            Add line settings for a set of offsets
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__config.html#ga4323e3c73aa52bbbd285d581f5dcaeee"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.AddLineSettings(System.Device.Gpio.Libgpiod.V2.Offset,System.Device.Gpio.Libgpiod.V2.LineSettings)">
            <summary>
            Add line settings for an offsets
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__config.html#ga4323e3c73aa52bbbd285d581f5dcaeee"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.GetLineSettings(System.Device.Gpio.Libgpiod.V2.Offset)">
            <summary>
            Get line settings for offset
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__config.html#ga692d9e29a469810ea1b1c90f6353c187"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.SetOutputValues(System.Collections.Generic.IEnumerable{System.Device.Gpio.Libgpiod.V2.GpiodLineValue})">
            <summary>
            Set output values for a number of lines
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__config.html#gaff8e6b7614ab69cbed81a6279cf7d1ba"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.GetNumConfiguredOffsets">
            <summary>
            Get the number of configured line offsets
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__config.html#ga209df9d3c45b9cdcd683d3f96cf49e6f"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.GetConfiguredOffsets">
            <summary>
            Get configured offsets
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__config.html#ga36ca8a2ce78a9294d2336b4d9b7c0c17"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.GetSettingsByLine">
            <summary>
            Gets which lines has which settings.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.MakeSnapshot">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineConfig.Snapshot">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.Snapshot.#ctor(System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Device.Gpio.Libgpiod.V2.Offset,System.Device.Gpio.Libgpiod.V2.LineSettings.Snapshot})">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineConfig.Snapshot.ToString">
            <summary>
            Converts the whole snapshot to string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineInfo">
            <summary>
            Line info object contains an immutable snapshot of a line's status.
            The line info contains all the publicly available information about a line, which does not include the line value.
            The line must be requested to access the line value.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.#ctor(System.Device.Gpio.Libgpiod.V2.LineInfoSafeHandle)">
            <summary>
            Constructor for a line-info-proxy object that points to an existing gpiod line-info object using a safe handle.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.Copy">
            <summary>
            Copies an existing gpiod line-info object and returns a new line-info-proxy object.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetOffset">
            <summary>
            Get the offset of the line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#ga475a19156d5f4cc301a3c08244561b31"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetName">
            <summary>
            Get the name of the line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#ga840f2441b570bdef1d6ed48549aab822"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetIsUsed">
            <summary>
            Check if the line is in use
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#gaa396a0742e7ddec1a2132e5a7e5ad4a3"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetConsumer">
            <summary>
            Get the name of the consumer of the line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#ga6a0cdc283fb52809a1fa033e9f84559a"/>
            <returns>The name of the consumer or <c>null</c> if the line has no consumer</returns>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetDirection">
            <summary>
            Get the direction setting of the line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#ga4de32ec5cfe5fc71036f004eaa82b60e"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetEdgeDetection">
            <summary>
            Get the edge detection setting of the line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#gac0e128b53298d16af4e31cde1972bfe0"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetBias">
            <summary>
            Get the bias setting of the line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#gaf687e04d662e415462607a478a09378f"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetDrive">
            <summary>
            Get the drive setting of the line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#gaf69559182170b0fb0c85cfd187f10e99"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetIsActiveLow">
            <summary>
            Check if the logical value of the line is inverted compared to the physical
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#ga9af13bafcc842e51fd5f3254c172252d"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetIsDebounced">
            <summary>
            Check if the line is debounced (either by hardware or by the kernel software debouncer)
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#ga6837821a7c416b4942740917266d59bf"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetDebouncePeriod">
            <summary>
            Get the debounce period of the line, in microseconds
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#gad7a9665eb5f0daeb5a097818ff6b4e08"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.GetEventClock">
            <summary>
            Get the event clock setting used for edge event timestamps for the line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__info.html#ga436753e2a5e8f445b2d844ac1e45df25"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.MakeSnapshot">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineInfo.Snapshot">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.Snapshot.#ctor(System.Device.Gpio.Libgpiod.V2.Offset,System.String,System.Boolean,System.String,System.Device.Gpio.Libgpiod.V2.GpiodLineDirection,System.Device.Gpio.Libgpiod.V2.GpiodLineEdge,System.Device.Gpio.Libgpiod.V2.GpiodLineBias,System.Device.Gpio.Libgpiod.V2.GpiodLineDrive,System.Boolean,System.Boolean,System.TimeSpan,System.Device.Gpio.Libgpiod.V2.GpiodLineClock)">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfo.Snapshot.ToString">
            <summary>
            Converts the whole snapshot to string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineInfoEvent">
            <summary>
            Callers are notified about changes in a line's status due to GPIO uAPI calls.
            Each info event contains information about the event itself (timestamp, type)
            as well as a snapshot of line's status in the form of a line-info object.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__watch.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfoEvent.#ctor(System.Device.Gpio.Libgpiod.V2.LineInfoEventSafeHandle)">
            <summary>
            Constructor for a line-info-event-proxy object that points to an existing gpiod line-info-event object using a safe handle.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__watch.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfoEvent.GetEventType">
            <summary>
            Get the event type of the status change event
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__watch.html#ga24dd6128454beac4fe129cda1bda361e"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfoEvent.GetTimestampNs">
            <summary>
            Get the timestamp of the event
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__watch.html#ga2cc4923098c7832eeb72e869b6261a0b"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfoEvent.GetLineInfo">
            <summary>
            Get the snapshot of line-info associated with the event
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__watch.html#ga5b8e7faf72fe0e51512721b7583d0497"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfoEvent.MakeSnapshot">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineInfoEvent.Snapshot.ToString">
            <summary>
            Converts the whole snapshot to string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineRequest">
            <summary>
            A Line Request is similar in concept to a "reservation" of the requested line/s.
            In order to get a Request object, a RequestConfig object has to be sent to a chip,
            that denies or grants the request, returning a new Request object.
            This object provides exclusive usage, i.e. reading or setting lines state.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#details"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.#ctor(System.Device.Gpio.Libgpiod.V2.LineRequestSafeHandle)">
            <summary>
            Constructor for a line-request-proxy object that points to an existing gpiod line-request object using a safe handle.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html"/>
        </member>
        <member name="P:System.Device.Gpio.Libgpiod.V2.LineRequest.IsAlive">
            <summary>
            Indicates whether this request can be used to interact with.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.GetNumRequestedLines">
            <summary>
            Get the number of lines in the request
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#ga4e77f97baf50ba2bc45747ab35813053"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.GetRequestedOffsets">
            <summary>
            Get the offsets of the lines in the request
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#ga15e16ace4b3abc7ce6174b23a0f1b4f7"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.GetValue(System.Device.Gpio.Libgpiod.V2.Offset)">
            <summary>
            Get the value of a single requested line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#gac1bbffb471768425c85d231077f1da0a"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.GetValuesSubset(System.Collections.Generic.IEnumerable{System.Device.Gpio.Libgpiod.V2.Offset})">
            <summary>
            Get the values of a subset of requested lines
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#ga5c9ff52972737a0c6e72f9d580421e39"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.GetValues">
            <summary>
            Get the values of all requested lines
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#ga4b2ef066faf905e61f5b45f8f2c8f195"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.SetValue(System.Device.Gpio.Libgpiod.V2.Offset,System.Device.Gpio.Libgpiod.V2.GpiodLineValue)">
            <summary>
            Set the value of a single requested line
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#ga22131b9472ea893194340683fa56d45b"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.SetValuesSubset(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Device.Gpio.Libgpiod.V2.Offset,System.Device.Gpio.Libgpiod.V2.GpiodLineValue}})">
            <summary>
            Set the values of a subset of requested lines
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#ga5e48a32e554537a512bb3d5d04cd5c6a"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.SetValues(System.Collections.Generic.IEnumerable{System.Device.Gpio.Libgpiod.V2.GpiodLineValue})">
            <summary>
            Set the values of all lines associated with a request
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#gaca3ed4c1ac47e233c8d6c1da82189b4f"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Count of values does not match number of currently requested lines</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.ReconfigureLines(System.Device.Gpio.Libgpiod.V2.LineConfig)">
            <summary>
            Update the configuration of lines associated with a line request
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#gac105ea1e4d4dd82bd70fb224016b3ec5"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.GetFileDescriptor">
            <summary>
            Get the file descriptor associated with a line request
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#ga5c0dbdcd8608b76e77b78bca9a6b03d7"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.WaitEdgeEvents(System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Wait for edge events on any of the requested lines.
            </summary>
            <param name="timeout">Wait time limit. If set to 0, the function returns immediately. Defaults to 1 second.</param>
            <param name="waitIndefinitely">When set to true, <paramref name="timeout"/> is ignored and the function blocks indefinitely until an event becomes available.</param>
            <returns>
            0 if wait timed out, 1 if an event is pending. q Lines must have edge detection set for edge events to be emitted. By default edge detection is disabled.
            </returns>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#gaa50f3ac6cd2b3373f36ecd32603215bc"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.WaitEdgeEventsRespectfully(System.Nullable{System.TimeSpan})">
            <summary>
            A more respectful version of <see cref="M:System.Device.Gpio.Libgpiod.V2.LineRequest.WaitEdgeEvents(System.Nullable{System.TimeSpan},System.Boolean)"/> that returns as soon as another thread signals it to i.e. this method
            does not stubbornly wait for the timeout or an event to appear, blocking any other call in between.
            </summary>
            <remarks>
            Uses epoll to wait for either edge events of the requests file descriptor or signals coming from <see cref="M:System.Device.Gpio.Libgpiod.V2.LineRequest.StopWaitingOnEdgeEvents"/>.
            For example when this method is waiting on edge events, and someone calls Close, a signal will be written to the signal file descriptor
            which triggers epoll to return, which allows releasing the lock to let the other thread through.
            </remarks>
            <returns>0 if wait timed out, 2 if wait got interrupted, 1 if an event is pending.</returns>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.StopWaitingOnEdgeEvents">
            <summary>
            Stops <see cref="M:System.Device.Gpio.Libgpiod.V2.LineRequest.WaitEdgeEventsRespectfully(System.Nullable{System.TimeSpan})"/> waiting for events.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.ReadEdgeEvents(System.Device.Gpio.Libgpiod.V2.EdgeEventBuffer)">
            <summary>
            Read a number of edge events from a line request
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__request.html#gae260e953a25f602a57673bc42460ae63"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.MakeSnapshot(System.Device.Gpio.Libgpiod.V2.Chip)">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineRequest.Snapshot">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.Snapshot.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Device.Gpio.Libgpiod.V2.LineInfo.Snapshot})">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineRequest.Snapshot.ToString">
            <summary>
            Converts the whole snapshot to string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineSettings">
            <summary>
            Callers are notified about changes in a line's status due to GPIO uAPI calls.
            Each info event contains information about the event itself (timestamp, type)
            as well as a snapshot of line's status in the form of a line-info object.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__watch.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.#ctor(System.Device.Gpio.Libgpiod.V2.LineSettingsSafeHandle)">
            <summary>
            Constructor for a line-settings-proxy object. This call will create a new gpiod line-settings object.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.Copy">
            <summary>
            Copies an existing gpiod line-settings object and returns a new line-settings-proxy object.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.Reset">
            <summary>
            Reset the line settings object to its default values
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga324f336505f50fd85fb5f7019b36d766"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.SetDirection(System.Device.Gpio.Libgpiod.V2.GpiodLineDirection)">
            <summary>
            Set direction
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#gac8aefce211865b025ebd77eebd8d987b"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.GetDirection">
            <summary>
            Get direction
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga25d849e5a328968e8a30ba7fccd3f54d"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.SetEdgeDetection(System.Device.Gpio.Libgpiod.V2.GpiodLineEdge)">
            <summary>
            Set edge detection
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga61abb95b4015bd5563c00cf8d1b996ba"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.GetEdgeDetection">
            <summary>
            Get edge detection
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#gaae44f5ce10e1cca4cfe147b7b88985e8"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.SetBias(System.Device.Gpio.Libgpiod.V2.GpiodLineBias)">
            <summary>
            Set bias
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga30a68064399a5485bf0aa874b54186cf"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.GetBias">
            <summary>
            Get bias
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#gac4e8a58166121e9100747141f2033e9a"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.SetDrive(System.Device.Gpio.Libgpiod.V2.GpiodLineDrive)">
            <summary>
            Set drive
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#gab4960d461440690519e1fd36f90bc3a9"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.GetDrive">
            <summary>
            Get drive
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga33e9665afd40c03c223f57ad28176d49"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.SetActiveLow(System.Boolean)">
            <summary>
            Set active-low setting
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#gaa3361de155317f8f4b722e53f8407b58"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.GetActiveLow">
            <summary>
            Get active-low setting
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga9eb217e64b503a4dcdbd7c1a051d9c89"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.SetDebouncePeriod(System.TimeSpan)">
            <summary>
            Set debounce period
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga61f3cb8d87fa6d642f8854cebf5631c4"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.GetDebouncePeriod">
            <summary>
            Get debounce period
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga3dacb33e3823674cd34f5fa6de40f90e"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.SetEventClock(System.Device.Gpio.Libgpiod.V2.GpiodLineClock)">
            <summary>
            Set event clock
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga0e1dd0f4cbb9bd6aa0c08c1cf2236036"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.GetEventClock">
            <summary>
            Get event clock setting
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga42b419e0f53e6fd28464edd8f0a5a413"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.SetOutputValue(System.Device.Gpio.Libgpiod.V2.GpiodLineValue)">
            <summary>
            Set the output value
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga8c2292a52a6239d52c1f61d07cda2077"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.GetOutputValue">
            <summary>
            Get the output value
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__line__settings.html#ga7cad90f652fcc1c8c0000d69db9e8097"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.MakeSnapshot">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.LineSettings.Snapshot">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.Snapshot.#ctor(System.Device.Gpio.Libgpiod.V2.GpiodLineDirection,System.Device.Gpio.Libgpiod.V2.GpiodLineEdge,System.Device.Gpio.Libgpiod.V2.GpiodLineBias,System.Device.Gpio.Libgpiod.V2.GpiodLineDrive,System.Boolean,System.TimeSpan,System.Device.Gpio.Libgpiod.V2.GpiodLineClock,System.Device.Gpio.Libgpiod.V2.GpiodLineValue)">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.LineSettings.Snapshot.ToString">
            <summary>
            Converts the whole snapshot to string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.Miscellaneous">
            <summary>
            Contains functions that are not part of any specific concept.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__misc.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Miscellaneous.IsGpioChipDevice(System.String)">
            <summary>
            Check if the file pointed to by path is a GPIO chip character device
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__misc.html#gace4957f84bc1a308e581cbc5ec71e96d"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Miscellaneous.GetApiVersion">
            <summary>
            Get the API version of the library as a human-readable string
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__misc.html#gac7919e728ad7c9ba534ec543a8dbcac2"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.RequestConfig">
            <summary>
            Request config objects are used to pass a set of options to the kernel at the time of the line request.
            The mutators don't return error values. If the values are invalid, in general they are silently adjusted to acceptable ranges.
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__request__config.html"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.RequestConfig.#ctor(System.Device.Gpio.Libgpiod.V2.RequestConfigSafeHandle)">
            <summary>
            Constructor for a request-config-proxy object. This call will create a new gpiod request-config object.
            </summary>
            <param name="handle">Safe handle to the libgpiod object.</param>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__request__config.html#gaca72f4c114efce4aa3909a3f71fb6c8e"/>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.RequestConfig.SetConsumer(System.String)">
            <summary>
            Set the consumer name for the request
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__request__config.html#gaa0db92d603ba5150b15a3e985f2c62f8"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.RequestConfig.GetConsumer">
            <summary>
            Get the consumer name configured in the request config
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__request__config.html#ga70373b475c6505d5d755751ebee507ee"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.RequestConfig.SetEventBufferSize(System.Int32)">
            <summary>
            Set the size of the kernel event buffer for the request
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__request__config.html#ga75f4f38735d08ebd7f07fa57c19442f6"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Event buffer size is negative</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.RequestConfig.GetEventBufferSize">
            <summary>
            Get the edge event buffer size for the request config
            </summary>
            <seealso href="https://libgpiod.readthedocs.io/en/latest/group__request__config.html#ga1424773ef1ca72a0f622d20e701eafb7"/>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error invoking native function</exception>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.RequestConfig.MakeSnapshot">
            <summary>
            Helper function for capturing information and creating an immutable snapshot instance.
            </summary>
            <exception cref="T:System.Device.Gpio.Drivers.GpiodException">Unexpected error when invoking native function</exception>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.RequestConfig.Snapshot">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.RequestConfig.Snapshot.#ctor(System.String,System.Int32)">
            <summary>
            Contains all readable information that was recorded at one and the same time
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.Offset">
            <summary>
            Unique identifier of a line.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Offset.#ctor">
            <summary>
            Creates an offset with value 0.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Offset.op_Explicit(System.Device.Gpio.Libgpiod.V2.Offset)~System.Int32">
            <summary>
            Explicit cast operator Offset -> int
            </summary>
            <param name="i">The offset value</param>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Offset.op_Implicit(System.Int32)~System.Device.Gpio.Libgpiod.V2.Offset">
            <summary>
            Implicit cast operator int -> Offset
            </summary>
            <param name="i">The offset value</param>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Offset.op_Implicit(System.Device.Gpio.Libgpiod.V2.Offset)~System.UInt32">
            <summary>
            Implicit cast operator Offset -> uint
            </summary>
            <param name="o">The offset</param>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Offset.op_Implicit(System.UInt32)~System.Device.Gpio.Libgpiod.V2.Offset">
            <summary>
            Implicit cast operator uint -> Offset
            </summary>
            <param name="val">The uint value</param>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.Offset.ToString">
            <summary>
            Returns uint value as string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.OffsetExtensions">
            <summary>
            Extension methods for <see cref="T:System.Device.Gpio.Libgpiod.V2.Offset"/>
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.OffsetExtensions.Convert(System.Device.Gpio.Libgpiod.V2.Offset[])">
            <summary>
            Converts Offset[] to uint[]
            </summary>
            <param name="offsets">Array of offsets</param>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.OffsetExtensions.Convert(System.UInt32[])">
            <summary>
            Converts uint[] to Offset[]
            </summary>
            <param name="offsets">Array of offsets</param>
        </member>
        <member name="T:System.Device.Gpio.Libgpiod.V2.SequenceNumber">
            <summary>
            Value type for GPIO edge event sequence number
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.SequenceNumber.#ctor">
            <summary>
            Creates a sequence number with value 0.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.SequenceNumber.op_Explicit(System.Device.Gpio.Libgpiod.V2.SequenceNumber)~System.UInt64">
            <summary>
            Explicit cast operator SequenceNumber -> ulong
            </summary>
            <param name="s">The sequenceNumber</param>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.SequenceNumber.op_Implicit(System.UInt64)~System.Device.Gpio.Libgpiod.V2.SequenceNumber">
            <summary>
            Implicit cast operator ulong -> SequenceNumber
            </summary>
            <param name="val">The ulong value</param>
        </member>
        <member name="M:System.Device.Gpio.Libgpiod.V2.SequenceNumber.ToString">
            <summary>
            Returns ulong value as string
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Drivers.HummingBoardDriver">
            <summary>
            A GPIO driver for the HummingBoard.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.HummingBoardDriver._internalDriver">
            <summary>
            We can't have HummingBoardDriver inherit from Windows10Driver since that would cause issues
            when we decide to implement the driver on Linux. Having an internal driver instead that we
            will forward the calls for now.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.#ctor">
            <summary>
            Constructs a new instance of a <see cref="T:System.Device.Gpio.Drivers.HummingBoardDriver"/>.
            This is currently only supported on Windows.
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows</exception>
        </member>
        <member name="P:System.Device.Gpio.Drivers.HummingBoardDriver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <summary>
            Converts a board pin number to the driver's logical numbering scheme.
            </summary>
            <param name="pinNumber">The board pin number to convert.</param>
            <returns>The pin number in the driver's logical numbering scheme.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.GetPinMode(System.Int32)">
            <summary>
            Gets the mode of a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <returns>The mode of the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.Read(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.WaitForEventAsync(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.HummingBoardDriver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:System.Device.Gpio.Drivers.InterruptSysFsDriver">
            <summary>
            This overrides the SysFsDriver, when only the interrupt callback methods are required.
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Drivers.GpiodException">
            <summary>
            Exception in the context of calling libgpiod
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.GpiodException.#ctor">
            <summary>
            Exception in the context of calling libgpiod
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.GpiodException.#ctor(System.String)">
            <summary>
            Exception in the context of calling libgpiod
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.GpiodException.#ctor(System.String,System.Exception)">
            <summary>
            Exception in the context of calling libgpiod
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Drivers.LibGpiodDriver">
            <summary>
            This driver uses libgpiod to get user-level access to the GPIO ports.
            It supersedes the SysFsDriver, but requires that libgpiod is installed.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.#ctor(System.Int32)">
            <summary>
            Creates an instance of the LibGpiodDriver
            </summary>
            <param name="gpioChip">The number of the GPIO chip to drive</param>
            <remarks>
            The driver version is chosen based on the installed libgpiod version on the system. To select a specific library version use the
            other constructor or specify the environment variable DOTNET_IOT_LIBGPIOD_DRIVER_VERSION, see documentation
            </remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.#ctor(System.Int32,System.Device.Gpio.Drivers.LibGpiodDriverVersion)">
            <summary>
            Creates an instance of the LigGpiodDriver that targets specific version/s of libgpiod
            <see cref="F:System.Device.Gpio.Drivers.LibGpiodDriverVersion.V1"/> supports libgpiod.so.1.x to libgpiod.so.2.x
            and <see cref="F:System.Device.Gpio.Drivers.LibGpiodDriverVersion.V2"/> supports libgpiod.so.3.x
            </summary>
            <param name="gpioChip">The number of the GPIO chip to drive</param>
            <param name="driverVersion">Version of the libgpiod driver to create</param>
            <remarks>Alternatively, specify the environment variable DOTNET_IOT_LIBGPIOD_DRIVER_VERSION, see documentation</remarks>
        </member>
        <member name="P:System.Device.Gpio.Drivers.LibGpiodDriver.Version">
            <summary>
            Version of the libgpiod driver
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.GetAvailableVersions">
            <summary>
            A collection of driver versions that correspond to the installed versions of libgpiod on this system. Each driver is dependent
            on specific libgpiod version/s. If the collection is empty, it indicates that libgpiod might not be installed or could not be detected.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.LibGpiodDriver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.Read(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode,System.Device.Gpio.PinValue)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.LibGpiodDriver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:System.Device.Gpio.Drivers.LibGpiodDriverFactory">
            <summary>
            Driver factory for different versions of libgpiod.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.LibGpiodDriverFactory._driverVersionEnvVarValue">
            <summary>
            The value set by DOTNET_IOT_LIBGPIOD_DRIVER_VERSION. Null when not set.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.LibGpiodDriverFactory._driverVersionSetByEnvVar">
            <summary>
            The driver version that was resolved based on the value of DOTNET_IOT_LIBGPIOD_DRIVER_VERSION. Null when env var not set.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.LibGpiodDriverFactory._automaticallySelectedDriverVersion">
            <remarks>
            Driver version that is picked by this factory when no version is explicitly specified. Null when libpgiod is not installed.
            </remarks>
        </member>
        <member name="F:System.Device.Gpio.Drivers.LibGpiodDriverFactory._installedLibraries">
            <summary>
            Collection of installed libgpiod libraries (their file name).
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.LibGpiodDriverFactory.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.LibGpiodDriverFactory.DriverCandidates">
            <summary>
            A collection of driver versions that correspond to the installed versions of libgpiod on this system. Each driver is dependent
            on specific libgpiod version/s. If the collection is empty, it indicates that libgpiod might not be installed or could not be detected.
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Drivers.LibGpiodDriverVersion">
            <summary>
            Each driver version supports specific libgpiod version/s.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.LibGpiodDriverVersion.V1">
            <summary>
            Version 1 of the libgpiod driver. Supports libgpiod v0 to v1 (libgpiod.so.1.x to libgpiod.so.2.x)
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.LibGpiodDriverVersion.V2">
            <summary>
            Version 2 of the libgpiod driver. Supports libgpiod v2 (libgpiod.so.3.x)
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver">
            <summary>
            This driver uses libgpiod v0/1 to get user-level access to the gpio ports.
            It superseeds the SysFsDriver, but requires that libgpiod is installed. To do so, run
            "sudo apt install -y libgpiod-dev".
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.PinCount">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.#ctor(System.Int32)">
            <summary>
            Construct an instance
            </summary>
            <param name="gpioChip">Number of the gpio Chip. Default 0</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.Read(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.SetPinMode(System.Int32,System.Device.Gpio.PinMode,System.Device.Gpio.PinValue)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V1.LibGpiodV1Driver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver">
            <summary>
            Driver that uses libgpiod V2 for GPIO control.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.#ctor(System.Device.Gpio.Libgpiod.V2.Chip,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a driver instance for the specified GPIO chip.
            </summary>
            <param name="chip">Chip proxy object to drive.</param>
            <param name="waitEdgeEventsTimeout">Timeout to wait for edge events. Primarily used for testing.</param>
        </member>
        <member name="P:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.OpenPin(System.Int32)">
            <inheritdoc/>
            <remarks>This only requests the line for it to be reserved and the consumer to be set.</remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.ClosePin(System.Int32)">
            <inheritdoc/>
            <remarks>Un-reserves a line by closing a present line request.</remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
            <remarks>Sets direction of line by reconfiguring a present line request or creating new line request.</remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.Read(System.Int32)">
            <inheritdoc/>
            <remarks>Gets value by asking present line request or creating a new line request.</remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
            <remarks>Writes value by accessing present line request or creating a new line request.</remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
            <remarks>Waits for an edge event to happen on a line request. If line request does not exist it gets created.</remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
            <remarks>Adds a callback for edge events. If a line request is present for the specified line offset, it is adjusted.</remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
            <remarks>Removes a callback for edge events. If a line request is present for the specified line offset, it is adjusted.</remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.ReconfigureExistingRequest(System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.RequestedLines,System.Device.Gpio.Libgpiod.V2.Offset,System.Action{System.Device.Gpio.Libgpiod.V2.LineSettings})">
            <summary>
            Changes a field of an existing request object by
                1. making a copy of the settings of the target offset (to not interfere with other offsets that may use the same setting)
                2. changing the field on these settings
                3. getting other line settings for other offsets, grouping them together by setting (to make as least calls to AddLineSettings as possible)
                4. resetting current line config object, and assigning new settings
                5. reconfiguring request object with new line config
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver">
            <summary>
            Class that observes libgpiod line requests for events.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.WaitEdgeEventsTimeout">
            <summary>
            Timeout for waiting on edge events.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.ObserveSingleEvent(System.Device.Gpio.Libgpiod.V2.LineRequest,System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.EventSubscription)">
            <summary>
            Registers an event subscription and returns a handle that can be waited on for the event.
            When the event appears, the subscription will get removed again
            </summary>
            <param name="request">The line request to observe</param>
            <param name="eventSubscription">The subscription for events</param>
            <returns>A handle to wait on</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.Observe(System.Device.Gpio.Libgpiod.V2.LineRequest,System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.EventSubscription,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Registers an event subscription that may call <paramref name="callback"/>
            </summary>
            <param name="request">The line request to observe</param>
            <param name="eventSubscription">The subscription for events</param>
            <param name="callback">Method to call when event arrives</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.HasSubscriptionsFor(System.Device.Gpio.Libgpiod.V2.Offset)">
            <summary>
            Returns whether there exists a subscription for <param name="offset"></param>
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.RemoveCallback(System.Device.Gpio.Libgpiod.V2.Offset,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Removes a callback of an event subscription. If no callbacks are present anymore, the event subscription also gets removed.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.RemoveSubscriptions(System.Collections.Generic.IEnumerable{System.Device.Gpio.Libgpiod.V2.Offset})">
            <summary>
            Removes all event subscriptions of all specified offsets
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.RemoveSubscriptions(System.Device.Gpio.Libgpiod.V2.Offset)">
            <summary>
            Removes all event subscriptions of the specified offset
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.EnrichLineConfigWithPresentEventSubscriptions(System.Device.Gpio.Libgpiod.V2.LineConfig)">
            <summary>
            Since <see cref="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2Driver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)"/> does not create new requests (only adjusts present requests)
            it can happen that at a later point in time a new request is created for lines that have present event subscriptions in the observer.
            This method ensures that the line config sent in the (new) request is enriched with edge detection based on present event subscriptions.
            There is also the case where the pin mode is changed to output, which requires edge detection to be reset. When switching back to input,
            any present event subscriptions should be re-considered.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.LibGpiodV2EventObserver.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Libgpiod.V2.Translator.Includes(System.Device.Gpio.Libgpiod.V2.GpiodLineEdge,System.Device.Gpio.PinEventTypes)">
            <summary>
            Returns whether <paramref name="presentEdgeDetection"/> includes <paramref name="pinEventTypes"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Device.Gpio.Drivers.RaspberryPi3Driver">
            <summary>
            A GPIO driver for the Raspberry Pi 3 or 4, running Raspbian or Raspberry Pi OS (or, with some limitations, ubuntu)
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode">
            <summary>
            Used to set the Alternate Pin Mode on Raspberry Pi 3/4.
            The actual pin function for anything other than Input or Output is dependent
            on the pin and can be looked up in the Raspi manual.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode.Unknown">
            <summary>
            The mode is unknown
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode.Input">
            <summary>
            Gpio mode input
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode.Output">
            <summary>
            Gpio mode output
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode.Alt0">
            <summary>
            Mode ALT0
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode.Alt1">
            <summary>
            Mode ALT1
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode.Alt2">
            <summary>
            Mode ALT2
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode.Alt3">
            <summary>
            Mode ALT3
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode.Alt4">
            <summary>
            Mode ALT4
            </summary>
        </member>
        <member name="F:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode.Alt5">
            <summary>
            Mode ALT5
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.#ctor">
            <summary>
            Creates an instance of the RaspberryPi3Driver.
            This driver works on Raspberry 3 or 4, both on Linux and on Windows
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.RaspberryPi3Driver.AlternatePinModeSettingSupported">
            <summary>
            True if the driver supports <see cref="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.SetAlternatePinMode(System.Int32,System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode)"/> and <see cref="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.GetAlternatePinMode(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.RaspberryPi3Driver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.Read(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.SetPinMode(System.Int32,System.Device.Gpio.PinMode,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.WaitForEventAsync(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.GetAlternatePinMode(System.Int32)">
            <summary>
            Retrieve the current alternate pin mode for a given logical pin.
            This works also with closed pins.
            </summary>
            <param name="pinNumber">Pin number in the logical scheme of the driver</param>
            <returns>Current pin mode</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.SetAlternatePinMode(System.Int32,System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode)">
            <summary>
            Set the specified alternate mode for the given pin.
            Check the manual to know what each pin can do.
            </summary>
            <param name="pinNumber">Pin number in the logcal scheme of the driver</param>
            <param name="altPinMode">Alternate mode to set</param>
            <exception cref="T:System.NotSupportedException">This mode is not supported by this driver (or by the given pin)</exception>
            <remarks>The method is intended for usage by higher-level abstraction interfaces. User code should be very careful when using this method.</remarks>
        </member>
        <member name="P:System.Device.Gpio.Drivers.RaspberryPi3Driver.SetRegister">
            <summary>
            Allows directly setting the "Set pin high" register. Used for special applications only
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.RaspberryPi3Driver.ClearRegister">
            <summary>
            Allows directly setting the "Set pin low" register. Used for special applications only
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3Driver.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="T:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver">
            <summary>
            A GPIO driver for the Raspberry Pi 3 or 4, running Raspbian (or, with some limitations, ubuntu)
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.PinCount">
            <summary>
            Raspberry Pi 3 has 28 GPIO pins.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.IsPi4">
            <summary>
            Returns true if this is a Raspberry Pi4
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <summary>
            Converts a board pin number to the driver's logical numbering scheme.
            </summary>
            <param name="pinNumber">The board pin number to convert.</param>
            <returns>The pin number in the driver's logical numbering scheme.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Adds a handler for a pin value changed event.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="callback">Delegate that defines the structure for callbacks when a pin value changed event occurs.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.ClosePin(System.Int32)">
            <summary>
            Closes an open pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Checks if a pin supports a specific mode.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="mode">The mode to check.</param>
            <returns>The status if the pin supports the mode.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.OpenPin(System.Int32)">
            <summary>
            Opens a pin in order for it to be ready to use.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.Read(System.Int32)">
            <summary>
            Reads the current value of a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <returns>The value of the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Removes a handler for a pin value changed event.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="callback">Delegate that defines the structure for callbacks when a pin value changed event occurs.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Sets the mode to a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="mode">The mode to be set.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.GetPinModeFromHardware(System.Int32)">
            <summary>
            Gets the pin mode directly from the hardware. Assumes that its in a valid GPIO mode
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.SetInputPullMode(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Sets the resistor pull up/down mode for an input pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="mode">The mode of a pin to set the resistor pull up/down mode.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.SetInputPullModePi4(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Sets the resistor pull up/down mode for an input pin on the Raspberry Pi4.
            The above, complex method doesn't do anything on a Pi4 (it doesn't cause any harm, though)
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="mode">The mode of a pin to set the resistor pull up/down mode.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.SetAlternatePinMode(System.Int32,System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode)">
            <summary>
            Set the specified alternate mode for the given pin.
            Check the manual to know what each pin can do.
            </summary>
            <param name="pinNumber">Pin number in the logcal scheme of the driver</param>
            <param name="altPinMode">Alternate mode to set</param>
            <exception cref="T:System.NotSupportedException">This mode is not supported by this driver (or by the given pin)</exception>
            <remarks>The method is intended for usage by higher-level abstraction interfaces. User code should be very careful when using this method.</remarks>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.GetAlternatePinMode(System.Int32)">
            <summary>
            Retrieve the current alternate pin mode for a given logical pin.
            This works also with closed pins.
            </summary>
            <param name="pinNumber">Pin number in the logical scheme of the driver</param>
            <returns>Current pin mode</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <summary>
            Blocks execution until an event of type eventType is received or a cancellation is requested.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="cancellationToken">The cancellation token of when the operation should stop waiting for an event.</param>
            <returns>A structure that contains the result of the waiting operation.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.WaitForEventAsync(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <summary>
            Async call until an event of type eventType is received or a cancellation is requested.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="cancellationToken">The cancellation token of when the operation should stop waiting for an event.</param>
            <returns>A task representing the operation of getting the structure that contains the result of the waiting operation</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a value to a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="value">The value to be written to the pin.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.GetPeripheralBaseAddress">
            <summary>
            Returns the peripheral base address on the CPU bus of the raspberry pi based on the ranges set within the device tree.
            </summary>
            <remarks>
            The range examined in this method is essentially a mapping between where the peripheral base address on the videocore bus and its
            address on the cpu bus. The return value is 32bit (is in the first 4GB) even on 64 bit operating systems (debian / ubuntu tested) but may change in the future
            This method is based on bcm_host_get_peripheral_address() in libbcm_host which may not exist in all linux distributions.
            </remarks>
            <returns>This returns the peripheral base address as a 32 bit address or 0xFFFFFFFF when in error.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.GetPinMode(System.Int32)">
            <summary>
            Gets the mode of a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <returns>The mode of the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPi3LinuxDriver.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="T:System.Device.Gpio.Drivers.RaspberryPiCm3Driver">
            <summary>
            A GPIO driver for the Raspberry Pi Compute Module 3
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.RaspberryPiCm3Driver.PinCount">
            <summary>
            Raspberry CM3 has 48 GPIO pins.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.RaspberryPiCm3Driver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <summary>
            Converts a board pin number to the driver's logical numbering scheme.
            </summary>
            <param name="pinNumber">The board pin number to convert.</param>
            <returns>The pin number in the driver's logical numbering scheme.</returns>
        </member>
        <member name="T:System.Device.Gpio.Drivers.SysFsDriver">
            <summary>
            A GPIO driver for Unix.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Gpio.Drivers.SysFsDriver"/> class.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.SysFsDriver.StatusUpdateSleepTime">
            <summary>
            The sleep time after an event occured and before the new value is read.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.SysFsDriver.PinCount">
            <summary>
            The number of pins provided by the driver.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <summary>
            Converts a board pin number to the driver's logical numbering scheme.
            </summary>
            <param name="pinNumber">The board pin number to convert.</param>
            <returns>The pin number in the driver's logical numbering scheme.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.OpenPin(System.Int32)">
            <summary>
            Opens a pin in order for it to be ready to use.
            This retains the pin direction, but if it is output, the value will always be low after open.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.ClosePin(System.Int32)">
            <summary>
            Closes an open pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Sets the mode to a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="mode">The mode to be set.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.Read(System.Int32)">
            <summary>
            Reads the current value of a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <returns>The value of the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a value to a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="value">The value to be written to the pin.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Checks if a pin supports a specific mode.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="mode">The mode to check.</param>
            <returns>The status if the pin supports the mode.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <summary>
            Blocks execution until an event of type eventType is received or a cancellation is requested.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="eventTypes">The event types to wait for. Can be <see cref="F:System.Device.Gpio.PinEventTypes.Rising"/>, <see cref="F:System.Device.Gpio.PinEventTypes.Falling"/> or both.</param>
            <param name="cancellationToken">The cancellation token of when the operation should stop waiting for an event.</param>
            <returns>A structure that contains the result of the waiting operation.</returns>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Adds a handler for a pin value changed event.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="callback">Delegate that defines the structure for callbacks when a pin value changed event occurs.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Removes a handler for a pin value changed event.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="callback">Delegate that defines the structure for callbacks when a pin value changed event occurs.</param>
        </member>
        <member name="M:System.Device.Gpio.Drivers.SysFsDriver.GetPinMode(System.Int32)">
            <summary>
            Gets the mode of a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <returns>The mode of the pin.</returns>
        </member>
        <member name="T:System.Device.Gpio.Drivers.UnixDriver">
            <summary>
            The base class for the standard unix drivers
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.UnixDriver.#ctor">
            <summary>
            Construct an instance of an unix driver.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.UnixDriver.Create">
            <summary>
            Static factory method
            </summary>
            <returns>An instance of GpioDriver, depending on which one fits</returns>
        </member>
        <member name="T:System.Device.Gpio.Drivers.Windows10Driver">
            <summary>
            A GPIO driver for Windows 10 IoT.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Gpio.Drivers.Windows10Driver"/> class.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.Drivers.Windows10Driver.PinCount">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.ClosePin(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.GetPinMode(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.OpenPin(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.Read(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.Toggle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.Drivers.Windows10Driver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc />
        </member>
        <member name="T:System.Device.Gpio.GpioController">
            <summary>
            Represents a general-purpose I/O (GPIO) controller.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.GpioController._openPins">
            <summary>
            If a pin element exists, that pin is open. Uses current controller's numbering scheme
            </summary>
        </member>
        <member name="M:System.Device.Gpio.GpioController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Gpio.GpioController"/> class that will use the logical pin numbering scheme as default.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.GpioController.#ctor(System.Device.Gpio.PinNumberingScheme,System.Device.Gpio.GpioDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Gpio.GpioController"/> class that will use the specified numbering scheme and driver.
            </summary>
            <param name="numberingScheme">The numbering scheme used to represent pins provided by the controller.</param>
            <param name="driver">The driver that manages all of the pin operations for the controller.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.#ctor(System.Device.Gpio.PinNumberingScheme)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Gpio.GpioController"/> class that will use the specified numbering scheme.
            The controller will default to use the driver that best applies given the platform the program is executing on.
            </summary>
            <param name="numberingScheme">The numbering scheme used to represent pins provided by the controller.</param>
        </member>
        <member name="P:System.Device.Gpio.GpioController.NumberingScheme">
            <summary>
            The numbering scheme used to represent pins provided by the controller.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.GpioController.PinCount">
            <summary>
            The number of pins provided by the controller.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.GpioController.OpenPins">
            <summary>
            Returns the collection of open pins
            </summary>
        </member>
        <member name="M:System.Device.Gpio.GpioController.GetLogicalPinNumber(System.Int32)">
            <summary>
            Gets the logical pin number in the controller's numbering scheme.
            </summary>
            <param name="pinNumber">The pin number</param>
            <returns>The logical pin number in the controller's numbering scheme.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.OpenPin(System.Int32)">
            <summary>
            Opens a pin in order for it to be ready to use.
            The driver attempts to open the pin without changing its mode or value.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.OpenPinCore(System.Int32)">
            <summary>
            Opens a pin in order for it to be ready to use.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.OpenPin(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Opens a pin and sets it to a specific mode.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="mode">The mode to be set.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.OpenPin(System.Int32,System.Device.Gpio.PinMode,System.Device.Gpio.PinValue)">
            <summary>
            Opens a pin and sets it to a specific mode and value.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="mode">The mode to be set.</param>
            <param name="initialValue">The initial value to be set if the mode is output. The driver will attempt to set the mode without causing glitches to the other value.
            (if <paramref name="initialValue"/> is <see cref="P:System.Device.Gpio.PinValue.High"/>, the pin should not glitch to low during open)</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.ClosePin(System.Int32)">
            <summary>
            Closes an open pin.
            If allowed by the driver, the state of the pin is not changed.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.ClosePinCore(System.Int32)">
            <summary>
            Closes an open pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Sets the mode to a pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="mode">The mode to be set.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.GetPinMode(System.Int32)">
            <summary>
            Gets the mode of a pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <returns>The mode of the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.IsPinOpen(System.Int32)">
            <summary>
            Checks if a specific pin is open.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <returns>The status if the pin is open or closed.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Checks if a pin supports a specific mode.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="mode">The mode to check.</param>
            <returns>The status if the pin supports the mode.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.Read(System.Int32)">
            <summary>
            Reads the current value of a pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <returns>The value of the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.Toggle(System.Int32)">
            <summary>
            Toggle the current value of a pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a value to a pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="value">The value to be written to the pin.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.TimeSpan)">
            <summary>
            Blocks execution until an event of type eventType is received or a period of time has expired.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="timeout">The time to wait for the event.</param>
            <returns>A structure that contains the result of the waiting operation.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <summary>
            Blocks execution until an event of type eventType is received or a cancellation is requested.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="cancellationToken">The cancellation token of when the operation should stop waiting for an event.</param>
            <returns>A structure that contains the result of the waiting operation.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.WaitForEventAsync(System.Int32,System.Device.Gpio.PinEventTypes,System.TimeSpan)">
            <summary>
            Async call to wait until an event of type eventType is received or a period of time has expired.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="timeout">The time to wait for the event.</param>
            <returns>A task representing the operation of getting the structure that contains the result of the waiting operation.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.WaitForEventAsync(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <summary>
            Async call until an event of type eventType is received or a cancellation is requested.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="token">The cancellation token of when the operation should stop waiting for an event.</param>
            <returns>A task representing the operation of getting the structure that contains the result of the waiting operation</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.RegisterCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Adds a callback that will be invoked when pinNumber has an event of type eventType.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="callback">The callback method that will be invoked.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.UnregisterCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Removes a callback that was being invoked for pin at pinNumber.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="callback">The callback method that will be invoked.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.Dispose(System.Boolean)">
            <summary>
            Disposes this instance and closes all open pins associated with this controller.
            </summary>
            <param name="disposing">True to dispose all instances, false to dispose only unmanaged resources</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Gpio.GpioController.Write(System.ReadOnlySpan{System.Device.Gpio.PinValuePair})">
            <summary>
            Write the given pins with the given values.
            </summary>
            <param name="pinValuePairs">The pin/value pairs to write.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.Read(System.Span{System.Device.Gpio.PinValuePair})">
            <summary>
            Read the given pins with the given pin numbers.
            </summary>
            <param name="pinValuePairs">The pin/value pairs to read.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioController.GetBestDriverForBoard">
            <summary>
            Tries to create the GPIO driver that best matches the current hardware
            </summary>
            <returns>An instance of a GpioDriver that best matches the current hardware</returns>
            <exception cref="T:System.PlatformNotSupportedException">No matching driver could be found</exception>
        </member>
        <member name="M:System.Device.Gpio.GpioController.GetBestDriverForBoardOnLinux">
            <summary>
            Attempt to get the best applicable driver for the board the program is executing on.
            </summary>
            <returns>A driver that works with the board the program is executing on.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioController.GetBestDriverForBoardOnWindows">
            <summary>
            Attempt to get the best applicable driver for the board the program is executing on.
            </summary>
            <returns>A driver that works with the board the program is executing on.</returns>
            <remarks>
                This really feels like it needs a driver-based pattern, where each driver exposes a static method:
                public static bool IsSpecificToCurrentEnvironment { get; }
                The GpioController could use reflection to find all GpioDriver-derived classes and call this
                static method to determine if the driver considers itself to be the best match for the environment.
            </remarks>
        </member>
        <member name="M:System.Device.Gpio.GpioController.QueryComponentInformation">
            <summary>
            Query information about a component and its children.
            </summary>
            <returns>A tree of <see cref="T:System.Device.ComponentInformation"/> instances.</returns>
            <remarks>
            The returned data structure (or rather, its string representation) can be used to diagnose problems with incorrect driver types or
            other system configuration problems.
            This method is currently reserved for debugging purposes. Its behavior its and signature are subject to change.
            </remarks>
        </member>
        <member name="T:System.Device.Gpio.GpioDriver">
            <summary>
            Base class for Gpio Drivers.
            A Gpio driver provides methods to read from and write to digital I/O pins.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.Finalize">
            <summary>
            Finalizer to clean up unmanaged resources
            </summary>
        </member>
        <member name="P:System.Device.Gpio.GpioDriver.PinCount">
            <summary>
            The number of pins provided by the driver.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <summary>
            Converts a board pin number to the driver's logical numbering scheme.
            </summary>
            <param name="pinNumber">The board pin number to convert.</param>
            <returns>The pin number in the driver's logical numbering scheme.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.OpenPin(System.Int32)">
            <summary>
            Opens a pin in order for it to be ready to use.
            The driver attempts to open the pin without changing its mode or value.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.ClosePin(System.Int32)">
            <summary>
            Closes an open pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Sets the mode to a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="mode">The mode to be set.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode,System.Device.Gpio.PinValue)">
            <summary>
            Sets the mode to a pin and sets an initial value for an output pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="mode">The mode to be set.</param>
            <param name="initialValue">The initial value if the <paramref name="mode"/> is output. The driver will do it's best to prevent glitches to the other value when
            changing from input to output.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.GetPinMode(System.Int32)">
            <summary>
            Gets the mode of a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <returns>The mode of the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Checks if a pin supports a specific mode.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="mode">The mode to check.</param>
            <returns>The status if the pin supports the mode.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.Read(System.Int32)">
            <summary>
            Reads the current value of a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <returns>The value of the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.Toggle(System.Int32)">
            <summary>
            Toggle the current value of a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a value to a pin.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="value">The value to be written to the pin.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <summary>
            Blocks execution until an event of type eventType is received or a cancellation is requested.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="cancellationToken">The cancellation token of when the operation should stop waiting for an event.</param>
            <returns>A structure that contains the result of the waiting operation.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.WaitForEventAsync(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <summary>
            Async call until an event of type eventType is received or a cancellation is requested.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="cancellationToken">The cancellation token of when the operation should stop waiting for an event.</param>
            <returns>A task representing the operation of getting the structure that contains the result of the waiting operation</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Adds a handler for a pin value changed event.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="eventTypes">The event types to wait for.</param>
            <param name="callback">Delegate that defines the structure for callbacks when a pin value changed event occurs.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Removes a handler for a pin value changed event.
            </summary>
            <param name="pinNumber">The pin number in the driver's logical numbering scheme.</param>
            <param name="callback">Delegate that defines the structure for callbacks when a pin value changed event occurs.</param>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.Dispose">
            <summary>
            Disposes this instance, closing all open pins
            </summary>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
            <param name="disposing">True if explicitly disposing, false if in finalizer</param>
        </member>
        <member name="M:System.Device.Gpio.GpioDriver.QueryComponentInformation">
            <summary>
            Query information about a component and its children.
            </summary>
            <returns>A tree of <see cref="T:System.Device.ComponentInformation"/> instances.</returns>
            <remarks>
            The returned data structure (or rather, its string representation) can be used to diagnose problems with incorrect driver types or
            other system configuration problems.
            This method is currently reserved for debugging purposes. Its behavior its and signature are subject to change.
            </remarks>
        </member>
        <member name="T:System.Device.Gpio.GpioPin">
            <summary>
            Represents a general-purpose I/O (GPIO) pin.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.GpioPin.PinNumber">
            <summary>
            Gets the pin number of the general-purpose I/O (GPIO) pin.
            </summary>
            <value>
            The pin number of the GPIO pin.
            </value>
        </member>
        <member name="M:System.Device.Gpio.GpioPin.GetPinMode">
            <summary>
            Gets the current pin mode for the general-purpose I/O (GPIO) pin. The pin mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin.
            </summary>
            <returns>An enumeration value that indicates the current pin mode for the GPIO pin.
            The pin mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioPin.IsPinModeSupported(System.Device.Gpio.PinMode)">
            <summary>
            Gets whether the general-purpose I/O (GPIO) pin supports the specified pin mode.
            </summary>
            <param name="pinMode">The pin mode that you want to check for support.</param>
            <returns>
            <see langword="true"/> if the GPIO pin supports the pin mode that pinMode specifies; otherwise false.
            If you specify a pin mode for which this method returns <see langword="false"/> when you call <see cref="M:System.Device.Gpio.GpioPin.SetPinMode(System.Device.Gpio.PinMode)"/>, <see cref="M:System.Device.Gpio.GpioPin.SetPinMode(System.Device.Gpio.PinMode)"/> generates an exception.
            </returns>
        </member>
        <member name="M:System.Device.Gpio.GpioPin.SetPinMode(System.Device.Gpio.PinMode)">
            <summary>
            Sets the pin mode of the general-purpose I/O (GPIO) pin.
            The pin mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin.
            </summary>
            <param name="value">An enumeration value that specifies pin mode to use for the GPIO pin.
            The pin mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin.</param>
            <exception cref="T:System.ArgumentException">The GPIO pin does not support the specified pin mode.</exception>
        </member>
        <member name="M:System.Device.Gpio.GpioPin.Read">
            <summary>
            Reads the current value of the general-purpose I/O (GPIO) pin.
            </summary>
            <returns>The current value of the GPIO pin. If the pin is configured as an output, this value is the last value written to the pin.</returns>
        </member>
        <member name="M:System.Device.Gpio.GpioPin.Write(System.Device.Gpio.PinValue)">
            <summary>
            Drives the specified value onto the general purpose I/O (GPIO) pin according to the current pin mode for the pin
            if the pin is configured as an output, or updates the latched output value for the pin if the pin is configured as an input.
            </summary>
            <param name="value">The enumeration value to write to the GPIO pin.
            <para>If the GPIO pin is configured as an output, the method drives the specified value onto the pin according to the current pin mode for the pin.</para>
            <para>If the GPIO pin is configured as an input, the method updates the latched output value for the pin. The latched output value is driven onto the pin when the configuration for the pin changes to output.</para>
            </param>
            <exception cref="T:System.InvalidOperationException">This exception will be thrown on an attempt to write to a pin that hasn't been opened or is not configured as output.</exception>
        </member>
        <member name="E:System.Device.Gpio.GpioPin.ValueChanged">
            <summary>
            Occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.GpioPin.Toggle">
            <summary>
            Toggles the output of the general purpose I/O (GPIO) pin if the pin is configured as an output.
            </summary>
        </member>
        <member name="T:System.Device.Gpio.PinChangeEventHandler">
            <summary>
            Delegate that defines the structure for callbacks when a pin value changed event occurs.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="pinValueChangedEventArgs">The pin value changed arguments from the event.</param>
        </member>
        <member name="T:System.Device.Gpio.PinEventTypes">
            <summary>
            Event types that can be triggered by the GPIO.
            Also used to report the received event types back.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.PinEventTypes.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.PinEventTypes.Rising">
            <summary>
            Triggered when pin value goes from low to high.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.PinEventTypes.Falling">
            <summary>
            Triggered when a pin value goes from high to low.
            </summary>
        </member>
        <member name="T:System.Device.Gpio.PinMode">
            <summary>
            Pin modes supported by the GPIO controllers and drivers.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.PinMode.Input">
            <summary>
            Input used for reading values from a pin.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.PinMode.Output">
            <summary>
            Output used for writing values to a pin.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.PinMode.InputPullDown">
            <summary>
            Input using a pull-down resistor.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.PinMode.InputPullUp">
            <summary>
            Input using a pull-up resistor.
            </summary>
        </member>
        <member name="T:System.Device.Gpio.PinNumberingScheme">
            <summary>
            Different numbering schemes supported by GPIO controllers and drivers.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.PinNumberingScheme.Logical">
            <summary>
            The logical representation of the GPIOs. Refer to the microcontroller's datasheet to find this information.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.PinNumberingScheme.Board">
            <summary>
            The physical pin numbering that is usually accessible by the board headers.
            </summary>
        </member>
        <member name="T:System.Device.Gpio.PinValue">
            <summary>
            Represents a value for a pin.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.PinValue.High">
            <summary>
            The value of the pin is high.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.PinValue.Low">
            <summary>
            The value of the pin is low.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.PinValue.op_Implicit(System.Int32)~System.Device.Gpio.PinValue">
            <summary>
            Implicit conversion from int. 0 means <see cref="P:System.Device.Gpio.PinValue.Low"/>, everything else means <see cref="P:System.Device.Gpio.PinValue.High"/>.
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:System.Device.Gpio.PinValue.op_Implicit(System.Boolean)~System.Device.Gpio.PinValue">
            <summary>
            Implicit conversion from bool. <see langword="false"/> means <see cref="P:System.Device.Gpio.PinValue.Low"/>, <see langword="true"/> means <see cref="P:System.Device.Gpio.PinValue.High"/>
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:System.Device.Gpio.PinValue.op_Explicit(System.Device.Gpio.PinValue)~System.Byte">
            <summary>
            Conversion to byte. Returns 1 on <see cref="P:System.Device.Gpio.PinValue.High"/>, 0 on <see cref="P:System.Device.Gpio.PinValue.Low"/>
            </summary>
            <param name="value">PinValue to convert</param>
        </member>
        <member name="M:System.Device.Gpio.PinValue.op_Explicit(System.Device.Gpio.PinValue)~System.Int32">
            <summary>
            Conversion to int. Returns 1 on <see cref="P:System.Device.Gpio.PinValue.High"/>, 0 on <see cref="P:System.Device.Gpio.PinValue.Low"/>
            </summary>
            <param name="value">PinValue to convert</param>
        </member>
        <member name="M:System.Device.Gpio.PinValue.op_Explicit(System.Device.Gpio.PinValue)~System.Boolean">
            <summary>
            Conversion to byte. Returns <see langword="true"/> on <see cref="P:System.Device.Gpio.PinValue.High"/>, <see langword="false"/> on <see cref="P:System.Device.Gpio.PinValue.Low"/>
            </summary>
            <param name="value">PinValue to convert</param>
        </member>
        <member name="M:System.Device.Gpio.PinValue.Equals(System.Device.Gpio.PinValue)">
            <summary>
            Returns true if the other instance represents the same <see cref="T:System.Device.Gpio.PinValue"/> than this.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.PinValue.Equals(System.Object)">
            <inheritdoc cref="M:System.ValueType.Equals(System.Object)"/>
        </member>
        <member name="M:System.Device.Gpio.PinValue.op_Equality(System.Device.Gpio.PinValue,System.Device.Gpio.PinValue)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:System.Device.Gpio.PinValue.op_Inequality(System.Device.Gpio.PinValue,System.Device.Gpio.PinValue)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="M:System.Device.Gpio.PinValue.op_LogicalNot(System.Device.Gpio.PinValue)">
            <summary>
            Returns the inverse of the value
            </summary>
            <param name="v">Input value</param>
            <returns>High, when the input is low, low when the input is high</returns>
        </member>
        <member name="M:System.Device.Gpio.PinValue.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:System.Device.Gpio.PinValue.ToString">
            <summary>
            Returns "Low" for Low and "High" for High
            </summary>
        </member>
        <member name="T:System.Device.Gpio.PinValueChangedEventArgs">
            <summary>
            Arguments passed in when an event is triggered by the GPIO.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.PinValueChangedEventArgs.#ctor(System.Device.Gpio.PinEventTypes,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Gpio.PinValueChangedEventArgs"/> class.
            </summary>
            <param name="changeType">The change type that triggered the event.</param>
            <param name="pinNumber">The pin number that triggered the event.</param>
        </member>
        <member name="P:System.Device.Gpio.PinValueChangedEventArgs.ChangeType">
            <summary>
            The change type that triggered the event.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.PinValueChangedEventArgs.PinNumber">
            <summary>
            The pin number that triggered the event.
            </summary>
        </member>
        <member name="T:System.Device.Gpio.PinValuePair">
            <summary>
            Simple wrapper for a pin/value pair.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.PinValuePair.PinNumber">
            <summary>
            The pin number.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.PinValuePair.PinValue">
            <summary>
            The pin value.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.PinValuePair.#ctor(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Gpio.PinValuePair"/> struct.
            </summary>
            <param name="pinNumber">The pin number.</param>
            <param name="pinValue">The pin value.</param>
        </member>
        <member name="M:System.Device.Gpio.PinValuePair.Deconstruct(System.Int32@,System.Device.Gpio.PinValue@)">
            <summary>
            Deconstructor for convenience. Allows using as a "return Tuple".
            </summary>
        </member>
        <member name="T:System.Device.Gpio.RaspberryBoardInfo">
            <summary>
            Identification of Raspberry Pi board models
            </summary>
        </member>
        <member name="T:System.Device.Gpio.RaspberryBoardInfo.Model">
            <summary>
            The Raspberry Pi model.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.Unknown">
            <summary>
            Unknown model.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiA">
            <summary>
            Raspberry Model A.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiAPlus">
            <summary>
            Model A+.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiBRev1">
            <summary>
            Model B rev1.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiBRev2">
            <summary>
            Model B rev2.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiBPlus">
            <summary>
            Model B+.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiComputeModule">
            <summary>
            Compute module.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPi2B">
            <summary>
            Pi 2 Model B.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiZero">
            <summary>
            Pi Zero.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiZeroW">
            <summary>
            Pi Zero W.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiZero2W">
            <summary>
            Pi Zero 2 W.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPi3B">
            <summary>
            Pi 3 Model B.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPi3APlus">
            <summary>
            Pi 3 Model A+.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPi3BPlus">
            <summary>
            Pi 3 Model B+.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiComputeModule3">
            <summary>
            Compute module 3.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPi4">
            <summary>
            Pi 4 all versions.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPi400">
            <summary>
            Pi 400
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPiComputeModule4">
            <summary>
            Compute module 4.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.RaspberryBoardInfo.Model.RaspberryPi5">
            <summary>
            Pi 5 Model B+
            </summary>
        </member>
        <member name="M:System.Device.Gpio.RaspberryBoardInfo.GetBoardModel">
            <summary>
            Get board model from firmware revision
            See http://www.raspberrypi-spy.co.uk/2012/09/checking-your-raspberry-pi-board-version/ for information.
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Device.Gpio.RaspberryBoardInfo.ProcessorName">
            <summary>
            Gets the processor name.
            </summary>
            <value>
            The name of the processor.
            </value>
        </member>
        <member name="P:System.Device.Gpio.RaspberryBoardInfo.Firmware">
            <summary>
            Gets the board firmware version.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.RaspberryBoardInfo.SerialNumber">
            <summary>
            Gets the serial number.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.RaspberryBoardInfo.IsOverclocked">
            <summary>
            Gets a value indicating whether board is overclocked.
            </summary>
            <value>
              <c>true</c> if board is overclocked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:System.Device.Gpio.RaspberryBoardInfo.LoadBoardInfo">
            <summary>
            Detect the board CPU information from /proc/cpuinfo
            </summary>
            <returns>
            The <see cref="T:System.Device.Gpio.RaspberryBoardInfo"/>.
            </returns>
        </member>
        <member name="T:System.Device.Gpio.WaitForEventResult">
            <summary>
            Resulting object after waiting for an event to occur.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.WaitForEventResult.EventTypes">
            <summary>
            The event types that was detected.
            This is especially useful when listing to both rising and falling edges, where it will indicate which kind of edge was seen.
            </summary>
        </member>
        <member name="F:System.Device.Gpio.WaitForEventResult.TimedOut">
            <summary>
            True if waiting for the event timed out. False if an event was triggered before the timeout expired.
            </summary>
        </member>
        <member name="T:System.Device.ComponentInformation">
            <summary>
            A class to provide informational data about system components and active drivers and bindings.
            An instance of this class is typically obtained by calling QueryComponentInformation on any supported object.
            The structure represents a tree of connected devices, e.g. a controller and its associated drivers.
            </summary>
            <remarks>
            This class is currently reserved for debugging purposes. Its behavior its and signature are subject to change.
            </remarks>
        </member>
        <member name="M:System.Device.ComponentInformation.#ctor(System.Object,System.String)">
            <summary>
            Create a new instance of <see cref="T:System.Device.ComponentInformation"/>
            </summary>
            <param name="instance">The instance this information belongs to</param>
            <param name="description">An user-readable name for the object</param>
        </member>
        <member name="P:System.Device.ComponentInformation.Name">
            <summary>
            The name of the type this instance represents.
            </summary>
        </member>
        <member name="P:System.Device.ComponentInformation.Instance">
            <summary>
            The actual instance represented.
            This should only be used for querying information, not for operations on the object.
            </summary>
        </member>
        <member name="P:System.Device.ComponentInformation.Description">
            <summary>
            The user-friendly name of the object
            </summary>
        </member>
        <member name="P:System.Device.ComponentInformation.Properties">
            <summary>
            A list of additional properties that belong to this object.
            </summary>
        </member>
        <member name="P:System.Device.ComponentInformation.SubComponents">
            <summary>
            The list of subcomponents.
            </summary>
            <remarks>
            Note to implementors: Be careful not to generate cycles in the tree!
            </remarks>
        </member>
        <member name="M:System.Device.ComponentInformation.AddSubComponent(System.Device.ComponentInformation)">
            <summary>
            Adds another component as subcomponent of this one
            </summary>
            <param name="subComponent">Component to add</param>
            <exception cref="T:System.ArgumentNullException">The component to add is null.</exception>
        </member>
        <member name="M:System.Device.ComponentInformation.SubComponentsToString(System.Text.StringBuilder,System.Int32)">
            <summary>
            Provides the string representation of all sub-components
            </summary>
            <param name="output">The stringbuilder to extend</param>
            <param name="ident">The level of current ident</param>
        </member>
        <member name="M:System.Device.ComponentInformation.ToString">
            <summary>
            Creates a string representation of this object.
            </summary>
            <returns>A multi-line string in form of a tree.</returns>
        </member>
        <member name="T:System.Device.I2c.I2cBus">
            <summary>
            I2C bus communication channel.
            </summary>
            <summary>
            The communications channel to a device on an I2C bus.
            </summary>
        </member>
        <member name="M:System.Device.I2c.I2cBus.Create(System.Int32)">
            <summary>
            Creates default I2cBus
            </summary>
            <param name="busId">The bus ID.</param>
            <returns>I2cBus instance.</returns>
        </member>
        <member name="M:System.Device.I2c.I2cBus.CreateDevice(System.Int32)">
            <summary>
            Creates I2C device.
            </summary>
            <param name="deviceAddress">Device address related with the device to create.</param>
            <returns>I2cDevice instance.</returns>
        </member>
        <member name="M:System.Device.I2c.I2cBus.RemoveDevice(System.Int32)">
            <summary>
            Removes I2C device.
            </summary>
            <param name="deviceAddress">Device address to remove.</param>
        </member>
        <member name="M:System.Device.I2c.I2cBus.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:System.Device.I2c.I2cBus.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
            <param name="disposing"><see langword="true"/> if explicitly disposing, <see langword="false"/> if in finalizer</param>
        </member>
        <member name="M:System.Device.I2c.I2cBus.QueryComponentInformation">
            <summary>
            Query information about a component and it's children.
            </summary>
            <returns>A tree of <see cref="T:System.Device.ComponentInformation"/> instances.</returns>
            <remarks>
            This method is currently reserved for debugging purposes. Its behavior its and signature are subject to change.
            </remarks>
        </member>
        <member name="T:System.Device.I2c.I2cConnectionSettings">
            <summary>
            The connection settings of a device on an I2C bus.
            </summary>
        </member>
        <member name="M:System.Device.I2c.I2cConnectionSettings.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.I2c.I2cConnectionSettings"/> class.
            </summary>
            <param name="busId">The bus ID the I2C device is connected to.</param>
            <param name="deviceAddress">The bus address of the I2C device.</param>
        </member>
        <member name="P:System.Device.I2c.I2cConnectionSettings.BusId">
            <summary>
            The bus ID the I2C device is connected to.
            </summary>
        </member>
        <member name="P:System.Device.I2c.I2cConnectionSettings.DeviceAddress">
            <summary>
            The bus address of the I2C device.
            </summary>
        </member>
        <member name="M:System.Device.I2c.I2cConnectionSettings.Equals(System.Device.I2c.I2cConnectionSettings)">
            <summary>
            Equality comparator
            </summary>
            <param name="other">The other instance</param>
            <returns>True or false</returns>
        </member>
        <member name="M:System.Device.I2c.I2cConnectionSettings.Equals(System.Object)">
            <summary>
            Basic equality overload
            </summary>
            <param name="obj">The other instance</param>
            <returns>True on value equality, false otherwise</returns>
        </member>
        <member name="M:System.Device.I2c.I2cConnectionSettings.GetHashCode">
            <summary>
            Standard hash function
            </summary>
            <returns>A hash code</returns>
        </member>
        <member name="T:System.Device.I2c.I2cDevice">
            <summary>
            The communications channel to a device on an I2C bus.
            </summary>
            <summary>
            The communications channel to a device on an I2C bus.
            </summary>
        </member>
        <member name="P:System.Device.I2c.I2cDevice.ConnectionSettings">
            <summary>
            The connection settings of a device on an I2C bus. The connection settings are immutable after the device is created
            so the object returned will be a clone of the settings object.
            </summary>
        </member>
        <member name="M:System.Device.I2c.I2cDevice.Create(System.Device.I2c.I2cConnectionSettings)">
            <summary>
            Creates a communications channel to a device on an I2C bus running on the current platform
            </summary>
            <param name="settings">The connection settings of a device on an I2C bus.</param>
            <returns>A communications channel to a device on an I2C bus running on Windows 10 IoT.</returns>
        </member>
        <member name="M:System.Device.I2c.I2cDevice.ReadByte">
            <summary>
            Reads a byte from the I2C device.
            </summary>
            <returns>A byte read from the I2C device.</returns>
        </member>
        <member name="M:System.Device.I2c.I2cDevice.Read(System.Span{System.Byte})">
            <summary>
            Reads data from the I2C device.
            </summary>
            <param name="buffer">
            The buffer to read the data from the I2C device.
            The length of the buffer determines how much data to read from the I2C device.
            </param>
        </member>
        <member name="M:System.Device.I2c.I2cDevice.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the I2C device.
            </summary>
            <param name="value">The byte to be written to the I2C device.</param>
        </member>
        <member name="M:System.Device.I2c.I2cDevice.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes data to the I2C device.
            </summary>
            <param name="buffer">
            The buffer that contains the data to be written to the I2C device.
            The data should not include the I2C device address.
            </param>
        </member>
        <member name="M:System.Device.I2c.I2cDevice.WriteRead(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Performs an atomic operation to write data to and then read data from the I2C bus on which the device is connected,
            and sends a restart condition between the write and read operations.
            </summary>
            <param name="writeBuffer">
            The buffer that contains the data to be written to the I2C device.
            The data should not include the I2C device address.</param>
            <param name="readBuffer">
            The buffer to read the data from the I2C device.
            The length of the buffer determines how much data to read from the I2C device.
            </param>
        </member>
        <member name="M:System.Device.I2c.I2cDevice.QueryComponentInformation">
            <summary>
            Query information about a component and it's children.
            </summary>
            <returns>A tree of <see cref="T:System.Device.ComponentInformation"/> instances.</returns>
            <remarks>
            This method is currently reserved for debugging purposes. Its behavior its and signature are subject to change.
            </remarks>
        </member>
        <member name="M:System.Device.I2c.I2cDevice.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:System.Device.I2c.I2cDevice.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
            <param name="disposing"><see langword="true"/> if explicitly disposing, <see langword="false"/> if in finalizer</param>
        </member>
        <member name="T:System.Device.Pwm.Channels.BeagleBonePwmChannel">
            <summary>
            Represents a PWM channel running on a BeagleBone device.
            </summary>
            <remarks>
            The BeagleBone devices use a custom fork of the Linux kernel.
            This class allows us to access the PWM on devices running this version of the kernel.
            </remarks>
        </member>
        <member name="M:System.Device.Pwm.Channels.BeagleBonePwmChannel.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Pwm.Channels.BeagleBonePwmChannel"/> class.
            </summary>
            <param name="chip">The PWM chip number.</param>
            <param name="channel">The PWM channel number.</param>
            <param name="frequency">The frequency in hertz.</param>
            <param name="dutyCycle">The duty cycle represented as a value between 0.0 and 1.0.</param>
        </member>
        <member name="P:System.Device.Pwm.Channels.BeagleBonePwmChannel.ChannelName">
            <summary>The sysfs name of the PWM channel</summary>
            <returns>
            A string like "pwm-X:Y" where X is the Chip number and Y is the Channel number.
            </returns>
            <remarks>
            The BeagleBone kernel uses a non-standard naming convention for PWM Channels.
            https://github.com/beagleboard/linux/commit/0e09cd3599153a865e87e212ffed6d485488dd4f
            </remarks>
        </member>
        <member name="T:System.Device.Pwm.Channels.UnixPwmChannel">
            <summary>
            Represents a PWM channel running on Unix.
            </summary>
        </member>
        <member name="M:System.Device.Pwm.Channels.UnixPwmChannel.#ctor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Pwm.Channels.UnixPwmChannel"/> class.
            </summary>
            <param name="chip">The PWM chip number.</param>
            <param name="channel">The PWM channel number.</param>
            <param name="frequency">The frequency in hertz.</param>
            <param name="dutyCycle">The duty cycle represented as a value between 0.0 and 1.0.</param>
        </member>
        <member name="P:System.Device.Pwm.Channels.UnixPwmChannel.ChannelName">
            <summary>The sysfs name of the PWM channel</summary>
            <remarks>May be overriden to allow for non-standard sysfs naming.</remarks>
        </member>
        <member name="P:System.Device.Pwm.Channels.UnixPwmChannel.Frequency">
            <inheritdoc/>
        </member>
        <member name="P:System.Device.Pwm.Channels.UnixPwmChannel.DutyCycle">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Pwm.Channels.UnixPwmChannel.GetPeriodInNanoseconds(System.Int32)">
            <summary>
            Gets the frequency period in nanoseconds.
            </summary>
            <param name="frequency">The frequency in hertz.</param>
            <returns>The frequency period in nanoseconds.</returns>
        </member>
        <member name="M:System.Device.Pwm.Channels.UnixPwmChannel.SetDutyCycle(System.Double)">
            <summary>
            Sets the duty cycle for the channel.
            </summary>
            <param name="dutyCycle">The duty cycle to set represented as a value between 0.0 and 1.0.</param>
        </member>
        <member name="M:System.Device.Pwm.Channels.UnixPwmChannel.Validate">
            <summary>
            Verifies the specified chip and channel are available.
            </summary>
        </member>
        <member name="M:System.Device.Pwm.Channels.UnixPwmChannel.Close">
            <summary>
            Stops and closes the channel.
            </summary>
        </member>
        <member name="M:System.Device.Pwm.Channels.UnixPwmChannel.Open">
            <summary>
            Opens the channel.
            </summary>
        </member>
        <member name="M:System.Device.Pwm.Channels.UnixPwmChannel.Start">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Pwm.Channels.UnixPwmChannel.Stop">
            <inheritdoc/>
        </member>
        <member name="T:System.Device.Pwm.PwmChannel">
            <summary>
            Represents a single PWM channel.
            </summary>
            <summary>
            Represents a single PWM channel.
            </summary>
        </member>
        <member name="P:System.Device.Pwm.PwmChannel.Frequency">
            <summary>
            The frequency in hertz.
            </summary>
        </member>
        <member name="P:System.Device.Pwm.PwmChannel.DutyCycle">
            <summary>
            The duty cycle represented as a value between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:System.Device.Pwm.PwmChannel.Start">
            <summary>
            Starts the PWM channel.
            </summary>
        </member>
        <member name="M:System.Device.Pwm.PwmChannel.Stop">
            <summary>
            Stops the PWM channel.
            </summary>
        </member>
        <member name="M:System.Device.Pwm.PwmChannel.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:System.Device.Pwm.PwmChannel.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
            <param name="disposing"><see langword="true"/> if explicitly disposing, <see langword="false"/> if in finalizer</param>
        </member>
        <member name="M:System.Device.Pwm.PwmChannel.Create(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:System.Device.Pwm.PwmChannel"/> running on the current platform. (Windows 10 IoT or Unix/Raspbian)
            </summary>
            <param name="chip">The PWM chip number.</param>
            <param name="channel">The PWM channel number.</param>
            <param name="frequency">The frequency in hertz.</param>
            <param name="dutyCyclePercentage">The duty cycle percentage represented as a value between 0.0 and 1.0.</param>
            <returns>A PWM channel running on Windows 10 IoT.</returns>
        </member>
        <member name="M:System.Device.Pwm.PwmChannel.QueryComponentInformation">
            <summary>
            Query information about a component and it's children.
            </summary>
            <returns>A tree of <see cref="T:System.Device.ComponentInformation"/> instances.</returns>
            <remarks>
            This method is currently reserved for debugging purposes. Its behavior its and signature are subject to change.
            </remarks>
        </member>
        <member name="T:System.Device.Spi.DataFlow">
            <summary>
            Specifies order in which bits are transferred first on the SPI bus.
            </summary>
        </member>
        <member name="F:System.Device.Spi.DataFlow.MsbFirst">
            <summary>
            Most significant bit will be sent first (most of the devices use this value).
            </summary>
        </member>
        <member name="F:System.Device.Spi.DataFlow.LsbFirst">
            <summary>
            Least significant bit will be sent first.
            </summary>
        </member>
        <member name="T:System.Device.Spi.UnixSpiDevice">
            <summary>
            Represents a SPI communication channel running on Unix.
            </summary>
        </member>
        <member name="M:System.Device.Spi.UnixSpiDevice.#ctor(System.Device.Spi.SpiConnectionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Spi.UnixSpiDevice"/> class that will use the specified settings to communicate with the SPI device.
            </summary>
            <param name="settings">
            The connection settings of a device on a SPI bus.
            </param>
        </member>
        <member name="P:System.Device.Spi.UnixSpiDevice.DevicePath">
            <summary>
            Path to SPI resources located on the platform.
            </summary>
        </member>
        <member name="P:System.Device.Spi.UnixSpiDevice.ConnectionSettings">
            <summary>
            The connection settings of a device on a SPI bus. The connection settings are immutable after the device is created
            so the object returned will be a clone of the settings object.
            </summary>
        </member>
        <member name="M:System.Device.Spi.UnixSpiDevice.ReadByte">
            <summary>
            Reads a byte from the SPI device.
            </summary>
            <returns>A byte read from the SPI device.</returns>
        </member>
        <member name="M:System.Device.Spi.UnixSpiDevice.Read(System.Span{System.Byte})">
            <summary>
            Reads data from the SPI device.
            </summary>
            <param name="buffer">
            The buffer to read the data from the SPI device.
            The length of the buffer determines how much data to read from the SPI device.
            </param>
        </member>
        <member name="M:System.Device.Spi.UnixSpiDevice.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the SPI device.
            </summary>
            <param name="value">The byte to be written to the SPI device.</param>
        </member>
        <member name="M:System.Device.Spi.UnixSpiDevice.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes data to the SPI device.
            </summary>
            <param name="buffer">
            The buffer that contains the data to be written to the SPI device.
            </param>
        </member>
        <member name="M:System.Device.Spi.UnixSpiDevice.TransferFullDuplex(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Writes and reads data from the SPI device.
            </summary>
            <param name="writeBuffer">The buffer that contains the data to be written to the SPI device.</param>
            <param name="readBuffer">The buffer to read the data from the SPI device.</param>
        </member>
        <member name="T:System.Device.Spi.SpiConnectionSettings">
            <summary>
            The connection settings of a device on a SPI bus.
            </summary>
        </member>
        <member name="M:System.Device.Spi.SpiConnectionSettings.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Spi.SpiConnectionSettings"/> class.
            </summary>
            <param name="busId">The bus ID the device is connected to.</param>
            <param name="chipSelectLine">The chip select line used on the bus. Optional, -1 if not used</param>
        </member>
        <member name="P:System.Device.Spi.SpiConnectionSettings.BusId">
            <summary>
            The bus ID the device is connected to.
            </summary>
        </member>
        <member name="P:System.Device.Spi.SpiConnectionSettings.ChipSelectLine">
            <summary>
            The chip select line used on the bus.
            </summary>
        </member>
        <member name="P:System.Device.Spi.SpiConnectionSettings.Mode">
            <summary>
            The SPI mode being used.
            </summary>
        </member>
        <member name="P:System.Device.Spi.SpiConnectionSettings.DataBitLength">
            <summary>
            The length of the data to be transfered.
            </summary>
        </member>
        <member name="P:System.Device.Spi.SpiConnectionSettings.ClockFrequency">
            <summary>
            The frequency in which the data will be transferred.
            </summary>
        </member>
        <member name="P:System.Device.Spi.SpiConnectionSettings.DataFlow">
            <summary>
            Specifies order in which bits are transferred first on the SPI bus.
            </summary>
        </member>
        <member name="P:System.Device.Spi.SpiConnectionSettings.ChipSelectLineActiveState">
            <summary>
            Specifies which value on chip select pin means "active".
            </summary>
        </member>
        <member name="T:System.Device.Spi.SpiDevice">
            <summary>
            The communications channel to a device on a SPI bus.
            </summary>
            <summary>
            The communications channel to a device on a SPI bus.
            </summary>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.Create(System.Device.Spi.SpiConnectionSettings)">
            <summary>
            Creates a communications channel to a device on a SPI bus running on the current hardware
            </summary>
            <param name="settings">The connection settings of a device on a SPI bus.</param>
            <returns>A communications channel to a device on a SPI bus.</returns>
        </member>
        <member name="P:System.Device.Spi.SpiDevice.ConnectionSettings">
            <summary>
            The connection settings of a device on a SPI bus. The connection settings are immutable after the device is created
            so the object returned will be a clone of the settings object.
            </summary>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.ReadByte">
            <summary>
            Reads a byte from the SPI device.
            </summary>
            <returns>A byte read from the SPI device.</returns>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.Read(System.Span{System.Byte})">
            <summary>
            Reads data from the SPI device.
            </summary>
            <param name="buffer">
            The buffer to read the data from the SPI device.
            The length of the buffer determines how much data to read from the SPI device.
            </param>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the SPI device.
            </summary>
            <param name="value">The byte to be written to the SPI device.</param>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes data to the SPI device.
            </summary>
            <param name="buffer">
            The buffer that contains the data to be written to the SPI device.
            </param>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.TransferFullDuplex(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Writes and reads data from the SPI device.
            </summary>
            <param name="writeBuffer">The buffer that contains the data to be written to the SPI device.</param>
            <param name="readBuffer">The buffer to read the data from the SPI device.</param>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
            <param name="disposing"><see langword="true"/> if explicitly disposing, <see langword="false"/> if in finalizer</param>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.ReverseByte(System.Byte)">
            <summary>
            Reverse the byte
            </summary>
            <param name="toReverse">The byte to reverse</param>
            <returns></returns>
        </member>
        <member name="M:System.Device.Spi.SpiDevice.ReverseByte(System.Span{System.Byte})">
            <summary>
            Reverse the bytes
            </summary>
            <param name="span">The Span of byte to reverse</param>
        </member>
        <member name="T:System.Device.Spi.SpiMode">
            <summary>
            Defines how data is synchronized between devices on a SPI bus.
            Clock Polarity (CPOL) determines if clock signal is low or high when in idle state.
            Clock Phase (CPHA) determines when data is sampled relative to the clock signal.
            </summary>
        </member>
        <member name="F:System.Device.Spi.SpiMode.Mode0">
            <summary>
            CPOL 0, CPHA 0. Polarity is idled low and data is sampled on rising edge of the clock signal.
            </summary>
        </member>
        <member name="F:System.Device.Spi.SpiMode.Mode1">
            <summary>
            CPOL 0, CPHA 1. Polarity is idled low and data is sampled on falling edge of the clock signal.
            </summary>
        </member>
        <member name="F:System.Device.Spi.SpiMode.Mode2">
            <summary>
            CPOL 1, CPHA 0. Polarity is idled high and data is sampled on falling edge of the clock signal.
            </summary>
        </member>
        <member name="F:System.Device.Spi.SpiMode.Mode3">
            <summary>
            CPOL 1, CPHA 1. Polarity is idled high and data is sampled on rising edge of the clock signal.
            </summary>
        </member>
        <member name="M:System.Device.SysFsHelpers.EnsureReadWriteAccessToPath(System.String)">
            <summary>
            Ensures path can be read-write accessed or throws UnauthorizedAccessException.
            This method is meant to be used with sysfs drivers and access is checked for maximum period of 1 second.
            Waiting period is used to give time for udev to update permissions.
            </summary>
            <param name="path">Path to be checked for access</param>
        </member>
        <member name="M:System.Device.SysFsHelpers.EnsureDirectoryExistsAndHasReadWriteAccess(System.String)">
            <summary>
            Ensures directory exists and can be read-write accessed or throws UnauthorizedAccessException.
            This method is meant to be used with sysfs drivers and exception is thrown if progress is not made for one second.
            Waiting period is used to give time for udev to create directory or update permissions.
            </summary>
            <param name="directory">Directory to be checked for access</param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
    </members>
</doc>
